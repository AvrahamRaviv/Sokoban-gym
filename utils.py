import matplotlib.pyplot as plt
import numpy as np
import random
import torch
import torch.nn.functional as F

agent_value = np.float32(0.1608)
box_value = np.float32(0.8431)
target_value = np.float32(0.9490)
agent_in_goal_value = np.float32(0.9333)
box_in_goal_value = np.float32(0.5)
empty_value = np.float32(0.0)

def process_frame(frame):
    f = frame[16:96, 16:96, 0]
    f = f.reshape(5, 16, 5, 16).max(axis=(1, 3))
    # f = f.mean(axis=2)
    f = f.flatten()
    f = f / 255
    f = np.round(f, 4)
    f[f == 0.6902] = 1
    return np.expand_dims(f, axis=0)


def print_env_det(env):
    print(f'Observation space: {env.observation_space}'
          f'\nAction space: {env.action_space}'
          f'\nPlayer position:{env.player_position}'
          f'\nBox mapping: {env.box_mapping}')


def create_clean_trajectory(states_actions):
    # delete loops in the states_actions:
    # The format is: (array([x1,..., x25]), action). If the list contains two identical elements, then delete the
    # whole trail between them
    element_start_idx = 0
    element_end_idx = -1
    while element_start_idx <= (len(states_actions) - 1):
        # find all the occurrences of the element
        occ_indices = [i for i, x in enumerate(states_actions) if
                       np.array_equal(x[0], states_actions[element_start_idx][0])]
        # if occ_indices is empty, then the element is unique
        if len(occ_indices) > 0:
            element_end_idx = occ_indices[-1]
            # delete the trail between the two elements
            if element_end_idx == (element_start_idx + 1):
                del states_actions[element_end_idx]
            else:
                del states_actions[element_start_idx + 1:element_end_idx + 1]
        # update the element_start_idx
        element_start_idx += 1
        element_end_idx = -1

    # Verify that there are no two identical elements in the list
    # if there are, raise an error
    for i in range(len(states_actions) - 1):
        for j in range(i + 1, len(states_actions) - 1):
            if np.array_equal(states_actions[i][0], states_actions[j][0]) and np.array_equal(states_actions[i][1], states_actions[j][1]):
                raise ValueError('There are two identical elements in the list')

    return states_actions



e1 = [[0., 0., 0., 0., 0.],
    [0., 0.1608, 0.8431, 0.949, 0.],
    [0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0.]]

e2 = [[0., 0., 0., 0., 0.],
    [0., 0.1608, 0.8431, 0., 0.949],
    [0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0.]]

e3 = [[0., 0.1608, 0., 0., 0.],
    [0., 0., 0.8431, 0.949, 0.],
    [0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0.]]


def find_optimal_solution(e):
    """
    given 5*5 grid, find the optimal solution
    agent value: 0.1608
    box value: 0.8431
    target value: 0.949
    wall value: 1.0
    empty cell value: 0.0
    """
    # indices of the agent, the box and the goal
    e = np.asarray(e)
    agent_idx = [np.where(abs(e - 0.1608) < 0.01)[0][0], np.where(abs(e - 0.1608) < 0.01)[1][0]]
    box_idx = [np.where(abs(e - 0.8431) < 0.01)[0][0], np.where(abs(e - 0.8431) < 0.01)[1][0]]
    goal_idx = [np.where(abs(e - 0.949) < 0.01)[0][0], np.where(abs(e - 0.949) < 0.01)[1][0]]
    # first, check if there is solution by 1 step
    if agent_idx[0] == box_idx[0] and box_idx[0] == goal_idx[0]:
        # Check if they are adjacent, with the box in the middle
        if (agent_idx[1] == box_idx[1] - 1 and box_idx[1] == goal_idx[1] - 1) or \
                (agent_idx[1] == box_idx[1] + 1 and box_idx[1] == goal_idx[1] + 1):
            return 1
    elif agent_idx[1] == box_idx[1] and box_idx[1] == goal_idx[1]:
        # Check if they are adjacent, with the box in the middle
        if (agent_idx[0] == box_idx[0] - 1 and box_idx[0] == goal_idx[0] - 1) or \
                (agent_idx[0] == box_idx[0] + 1 and box_idx[0] == goal_idx[0] + 1):
            return 1

    # Now, check if there is a solution by 2 steps
    # It occurs when the agent, the box and the goal are in the same row or in the same column
    # the distance between the agent and the box is 2, and the box is anywhere between the agent and the goal
    if agent_idx[0] == box_idx[0] and box_idx[0] == goal_idx[0]:
        # Check if they are adjacent, with the box in the middle
        if agent_idx[1] == goal_idx[1] - 3 or agent_idx[1] == goal_idx[1] + 3:
            # check if the box is between the agent and the goal
            if (agent_idx[1] < box_idx[1] < goal_idx[1]) or (agent_idx[1] > box_idx[1] > goal_idx[1]):
                return 2
    elif agent_idx[1] == box_idx[1] and box_idx[1] == goal_idx[1]:
        # Check if they are adjacent, with the box in the middle
        if agent_idx[0] == goal_idx[0] - 3 or agent_idx[0] == goal_idx[0] + 3:
            # check if the box is between the agent and the goal
            if (agent_idx[0] < box_idx[0] < goal_idx[0]) or (agent_idx[0] > box_idx[0] > goal_idx[0]):
                return 2

    # Another scenario is when the box and the target are adjacent, and the agent in diagonal to the box
    if goal_idx[0] == box_idx[0] and abs(goal_idx[1] - box_idx[1]) == 1:
        if (agent_idx[0] == box_idx[0] - 1 and agent_idx[1] == box_idx[1] - 1) or \
                (agent_idx[0] == box_idx[0] - 1 and agent_idx[1] == box_idx[1] + 1) or \
                (agent_idx[0] == box_idx[0] + 1 and agent_idx[1] == box_idx[1] - 1) or \
                (agent_idx[0] == box_idx[0] + 1 and agent_idx[1] == box_idx[1] + 1):
            return 2
    elif goal_idx[1] == box_idx[1] and abs(goal_idx[0] - box_idx[0]) == 1:
        if (agent_idx[0] == box_idx[0] - 1 and agent_idx[1] == box_idx[1] - 1) or \
                (agent_idx[0] == box_idx[0] - 1 and agent_idx[1] == box_idx[1] + 1) or \
                (agent_idx[0] == box_idx[0] + 1 and agent_idx[1] == box_idx[1] - 1) or \
                (agent_idx[0] == box_idx[0] + 1 and agent_idx[1] == box_idx[1] + 1):
            return 2

    return None

    # with_1_step = []
    # with_2_steps = []
    # for e in range(1000):
    #     # call find_optimal_solution
    #     rand_seed = e + 100 if main_args.section == 'Push & Pull' else 2
    #     sok = agent.init_sok(random_seed=rand_seed)
    #     img = sok.get_image('rgb_array')
    #     state = process_frame(img)
    #     plt.imsave(f'puzzles/img_{e}.png', img)
    #     k = find_optimal_solution(state.reshape(5, 5))
    #     if k == 1:
    #         print(f'found solution for puzzle {e}, with {k} steps')
    #         with_1_step.append(e)
    #     elif k == 2:
    #         print(f'found solution for puzzle {e}, with {k} steps')
    #         with_2_steps.append(e)
    # print(with_1_step)
    # print(with_2_steps)
# with_4_steps = []
# for e in range(10000):
#     # call find_optimal_solution
#     rand_seed = e + 100
#     sok = agent.init_sok(random_seed=rand_seed)
#     room_state = sok.room_state
#     # wall = 0
#     # empty space = 1
#     # box target = 2
#     # box not on target = 3
#     # box on target = 4
#     # player = 5
#     # check if manheten distance between agent and target is greater than 4
#     agent_idx = np.where(room_state == 5)
#     goal_idx = np.where(room_state == 2)
#     if abs(agent_idx[0] - goal_idx[0]) + abs(agent_idx[1] - goal_idx[1]) >= 4:
#         with_4_steps.append(e)


# with_1_step = [2, 23, 43, 71, 91, 97, 98, 107, 108, 109, 114, 124, 132, 136, 139, 144, 145, 151, 157, 160, 161, 177, 178, 196, 197, 222, 229, 240, 250, 266, 268, 286, 307, 308, 309, 330, 339, 342, 351, 353, 387, 395, 405, 410, 411, 416, 418, 441, 446, 449, 463, 467, 478, 492, 497, 502, 509, 517, 524, 529, 537, 547, 573, 578, 587, 596, 603, 610, 616, 619, 626, 632, 647, 658, 665, 674, 684, 692, 694, 699, 700, 703, 737, 740, 748, 760, 766, 768, 778, 781, 784, 793, 797, 801, 805, 808, 811, 817, 823, 843, 859, 861, 870, 874, 881, 883, 902, 903, 911, 924, 925, 932, 954, 964, 971, 978, 982]
with_1_step = [14, 22, 26, 29, 48, 56, 61, 65, 70, 71, 84, 85, 90, 91, 93, 94, 95, 113, 114, 118, 129, 151, 155, 168, 183, 191, 220, 221, 223, 225, 230, 233, 238, 239, 244, 247, 268, 292, 294, 300, 307, 322, 324, 326, 334, 335, 348, 356, 390, 394, 405, 406, 423, 429, 435, 438, 466, 467, 490, 493, 495, 510, 512, 517, 520, 528, 530, 542, 555, 563, 576, 602, 607, 608, 611, 613, 633, 637, 646, 652, 658, 679, 698, 702, 705, 710, 728, 744, 751, 755, 757, 758, 767, 770, 775, 781, 790, 792, 794, 813, 821, 826, 832, 841, 859, 865, 868, 874, 875, 880, 881, 897, 909, 923, 926, 938, 967, 978, 990, 992, 993, 995, 1014, 1024, 1037, 1044, 1045, 1056, 1063, 1064, 1071, 1094, 1101, 1116, 1118, 1120, 1121, 1132, 1138, 1141, 1150, 1153, 1157, 1158, 1161, 1163, 1168, 1184, 1193, 1194, 1205, 1212, 1218, 1225, 1228, 1246, 1249, 1251, 1253, 1269, 1272, 1287, 1292, 1297, 1304, 1313, 1332, 1333, 1337, 1370, 1372, 1375, 1384, 1391, 1393, 1397, 1399, 1400, 1401, 1412, 1423, 1436, 1451, 1482, 1503, 1510, 1514, 1518, 1524, 1538, 1541, 1544, 1551, 1557, 1559, 1561, 1570, 1595, 1601, 1605, 1612, 1619, 1622, 1633, 1644, 1646, 1653, 1664, 1667, 1684, 1687, 1698, 1704, 1706, 1707, 1723, 1733, 1748, 1756, 1767, 1768, 1775, 1780, 1797, 1800, 1816, 1829, 1835, 1839, 1859, 1865, 1876, 1885, 1887, 1890, 1894, 1900, 1902, 1909, 1910, 1915, 1928, 1930, 1934, 1942, 1945, 1947, 1955, 1957, 1962, 1977, 1991, 1993, 2004, 2017, 2029, 2040, 2041, 2042, 2073, 2088, 2103, 2109, 2110, 2142, 2144, 2146, 2148, 2163, 2165, 2170, 2178, 2186, 2200, 2224, 2226, 2227, 2229, 2248, 2252, 2258, 2263, 2268, 2270, 2275, 2300, 2311, 2316, 2323, 2332, 2336, 2338, 2342, 2349, 2351, 2360, 2368, 2370, 2382, 2389, 2410, 2411, 2412, 2421, 2423, 2425, 2438, 2445, 2456, 2468, 2491, 2494, 2519, 2529, 2534, 2539, 2553, 2555, 2557, 2561, 2568, 2569, 2570, 2589, 2599, 2607, 2609, 2618, 2625, 2632, 2638, 2646, 2649, 2652, 2665, 2671, 2672, 2681, 2687, 2689, 2701, 2712, 2719, 2727, 2728, 2745, 2751, 2773, 2795, 2796, 2797, 2804, 2807, 2813, 2825, 2833, 2842, 2845, 2851, 2863, 2864, 2883, 2886, 2897, 2914, 2933, 2942, 2943, 2944, 2950, 2968, 2995, 3004, 3007, 3009, 3020, 3027, 3028, 3029, 3031, 3048, 3056, 3057, 3060, 3067, 3069, 3072, 3076, 3079, 3088, 3092, 3093, 3095, 3097, 3100, 3112, 3121, 3125, 3137, 3140, 3150, 3160, 3162, 3178, 3181, 3184, 3186, 3187, 3192, 3200, 3202, 3204, 3219, 3220, 3222, 3223, 3226, 3233, 3247, 3257, 3258, 3264, 3272, 3274, 3278, 3292, 3296, 3297, 3302, 3306, 3307, 3311, 3328, 3331, 3353, 3368, 3402, 3405, 3414, 3429, 3438, 3449, 3458, 3461, 3472, 3477, 3481, 3482, 3488, 3491, 3495, 3497, 3498, 3499, 3525, 3526, 3539, 3545, 3548, 3549, 3550, 3556, 3558, 3571, 3572, 3580, 3585, 3602, 3614, 3620, 3621, 3628, 3629, 3635, 3640, 3654, 3674, 3679, 3705, 3710, 3719, 3743, 3748, 3750, 3756, 3773, 3774, 3788, 3797, 3799, 3810, 3815, 3825, 3829, 3833, 3834, 3840, 3841, 3848, 3850, 3851, 3860, 3861, 3864, 3887, 3890, 3917, 3921, 3923, 3930, 3942, 3953, 3956, 3963, 3965, 3970, 3973, 3979, 3986, 4002, 4004, 4006, 4008, 4042, 4045, 4048, 4051, 4058, 4067, 4073, 4075, 4083, 4088, 4091, 4101, 4120, 4131, 4144, 4147, 4151, 4164, 4168, 4169, 4181, 4200, 4218, 4219, 4223, 4240, 4262, 4265, 4267, 4271, 4277, 4282, 4289, 4292, 4310, 4317, 4334, 4338, 4339, 4366, 4371, 4373, 4415, 4416, 4423, 4424, 4430, 4432, 4444, 4451, 4460, 4462, 4535, 4540, 4551, 4552, 4574, 4580, 4585, 4589, 4597, 4606, 4611, 4626, 4631, 4636, 4641, 4648, 4649, 4661, 4663, 4694, 4699, 4701, 4707, 4708, 4710, 4717, 4747, 4758, 4772, 4786, 4798, 4806, 4827, 4828, 4837, 4850, 4861, 4862, 4865, 4870, 4874, 4875, 4879, 4909, 4911, 4923, 4926, 4937, 4954, 4975, 4982, 4983, 5003, 5006, 5019, 5026, 5035, 5040, 5062, 5076, 5079, 5085, 5095, 5098, 5109, 5127, 5139, 5148, 5160, 5179, 5190, 5196, 5200, 5213, 5217, 5218, 5259, 5279, 5286, 5303, 5319, 5322, 5330, 5341, 5347, 5361, 5375, 5394, 5399, 5414, 5419, 5423, 5439, 5441, 5447, 5452, 5459, 5467, 5472, 5475, 5486, 5496, 5508, 5510, 5540, 5552, 5554, 5555, 5568, 5579, 5597, 5599, 5604, 5631, 5634, 5645, 5650, 5658, 5668, 5675, 5679, 5681, 5683, 5718, 5719, 5727, 5756, 5801, 5825, 5831, 5833, 5849, 5855, 5856, 5861, 5864, 5867, 5878, 5884, 5897, 5954, 5960, 5964, 5965, 5972, 5974, 5978, 5984, 5996, 5997, 5998, 6009, 6012, 6027, 6049, 6050, 6051, 6054, 6074, 6085, 6086, 6097, 6142, 6149, 6163, 6188, 6193, 6194, 6196, 6198, 6202, 6220, 6223, 6227, 6233, 6235, 6246, 6255, 6258, 6266, 6270, 6285, 6292, 6323, 6326, 6340, 6361, 6363, 6374, 6377, 6418, 6453, 6455, 6459, 6480, 6494, 6498, 6522, 6530, 6536, 6567, 6569, 6572, 6574, 6579, 6588, 6591, 6594, 6605, 6606, 6607, 6617, 6619, 6620, 6628, 6631, 6639, 6642, 6654, 6673, 6679, 6700, 6705, 6706, 6716, 6721, 6729, 6739, 6744, 6753, 6784, 6791, 6806, 6808, 6811, 6818, 6824, 6829, 6835, 6838, 6845, 6853, 6857, 6879, 6881, 6885, 6905, 6921, 6923, 6924, 6926, 6930, 6935, 6945, 6952, 6955, 6975, 6980, 6984, 6993, 7001, 7004, 7007, 7031, 7032, 7037, 7043, 7072, 7082, 7083, 7102, 7113, 7116, 7128, 7162, 7171, 7173, 7181, 7185, 7192, 7198, 7205, 7211, 7215, 7219, 7224, 7228, 7230, 7263, 7273, 7285, 7290, 7294, 7307, 7309, 7317, 7328, 7355, 7375, 7377, 7378, 7386, 7389, 7397, 7405, 7410, 7411, 7414, 7415, 7437, 7439, 7452, 7461, 7464, 7475, 7478, 7482, 7488, 7490, 7494, 7501, 7513, 7524, 7536, 7545, 7554, 7564, 7573, 7589, 7590, 7591, 7592, 7599, 7600, 7608, 7617, 7623, 7628, 7636, 7643, 7645, 7650, 7674, 7682, 7689, 7693, 7707, 7718, 7731, 7735, 7743, 7762, 7764, 7771, 7777, 7782, 7790, 7793, 7806, 7807, 7808, 7834, 7846, 7847, 7850, 7872, 7881, 7894, 7895, 7903, 7907, 7911, 7913, 7917, 7918, 7929, 7936, 7942, 7943, 7946, 7947, 7959, 7960, 7961, 7967, 7982, 7983, 7991, 7992, 8031, 8035, 8038, 8040, 8043, 8065, 8069, 8087, 8091, 8092, 8102, 8104, 8107, 8118, 8122, 8125, 8131, 8132, 8135, 8149, 8150, 8176, 8178, 8179, 8183, 8188, 8189, 8208, 8220, 8246, 8266, 8268, 8292, 8300, 8301, 8302, 8303, 8307, 8314, 8333, 8336, 8348, 8351, 8374, 8375, 8383, 8385, 8391, 8396, 8399, 8401, 8412, 8425, 8441, 8452, 8454, 8460, 8469, 8477, 8506, 8508, 8527, 8537, 8539, 8547, 8562, 8570, 8575, 8584, 8613, 8615, 8618, 8626, 8629, 8630, 8634, 8647, 8658, 8677, 8681, 8690, 8693, 8695, 8713, 8721, 8731, 8737, 8743, 8778, 8798, 8799, 8801, 8806, 8818, 8819, 8824, 8827, 8837, 8838, 8848, 8850, 8854, 8876, 8877, 8880, 8884, 8893, 8894, 8899, 8901, 8903, 8909, 8925, 8926, 8930, 8939, 8944, 8958, 8967, 8972, 8973, 8974, 8979, 8997, 8998, 9011, 9013, 9026, 9029, 9037, 9038, 9040, 9042, 9048, 9053, 9058, 9066, 9086, 9096, 9098, 9100, 9101, 9119, 9123, 9130, 9134, 9147, 9175, 9199, 9200, 9202, 9206, 9209, 9218, 9221, 9228, 9271, 9312, 9316, 9318, 9320, 9325, 9331, 9333, 9338, 9339, 9368, 9386, 9398, 9399, 9408, 9421, 9431, 9455, 9464, 9468, 9503, 9519, 9526, 9535, 9537, 9540, 9548, 9555, 9560, 9568, 9569, 9573, 9577, 9580, 9588, 9596, 9615, 9622, 9631, 9638, 9640, 9656, 9674, 9676, 9691, 9692, 9696, 9700, 9703, 9704, 9710, 9719, 9721, 9724, 9725, 9729, 9731, 9735, 9745, 9748, 9755, 9756, 9764, 9772, 9773, 9779, 9792, 9807, 9844, 9847, 9855, 9859, 9870, 9874, 9888, 9892, 9900, 9926, 9933, 9945, 9951, 9954, 9956, 9957, 9960, 9962, 9979]
with_2_steps = [1, 2, 7, 10, 18, 39, 54, 57, 59, 69, 72, 75, 88, 106, 125, 127, 128, 136, 138, 142, 150, 152, 157, 161, 166, 175, 178, 187, 189, 200, 209, 218, 219, 227, 237, 245, 254, 256, 270, 272, 274, 280, 282, 302, 305, 318, 321, 327, 330, 337, 341, 342, 382, 389, 400, 410, 415, 421, 428, 441, 443, 462, 472, 488, 497, 498, 499, 500, 509, 511, 519, 531, 532, 537, 547, 557, 562, 568, 571, 592, 603, 606, 615, 623, 625, 640, 642, 645, 648, 659, 664, 666, 670, 671, 675, 677, 721, 740, 742, 756, 759, 782, 784, 798, 800, 823, 828, 837, 840, 858, 871, 873, 883, 885, 896, 906, 911, 920, 934, 937, 947, 949, 952, 964, 969, 976, 980, 983, 985, 989, 1005, 1010, 1017, 1028, 1034, 1036, 1040, 1058, 1078, 1082, 1083, 1085, 1086, 1098, 1103, 1106, 1126, 1136, 1156, 1167, 1171, 1182, 1185, 1221, 1230, 1243, 1256, 1259, 1260, 1262, 1263, 1277, 1282, 1283, 1294, 1319, 1325, 1334, 1344, 1360, 1376, 1383, 1387, 1388, 1396, 1398, 1403, 1414, 1415, 1417, 1419, 1421, 1429, 1446, 1457, 1467, 1470, 1480, 1504, 1513, 1519, 1526, 1530, 1543, 1553, 1572, 1578, 1580, 1597, 1600, 1611, 1615, 1640, 1681, 1694, 1700, 1711, 1714, 1718, 1720, 1735, 1755, 1769, 1771, 1772, 1790, 1795, 1798, 1807, 1812, 1817, 1819, 1821, 1831, 1833, 1842, 1848, 1850, 1852, 1854, 1867, 1868, 1881, 1883, 1886, 1889, 1892, 1916, 1948, 1969, 1980, 1982, 1988, 2011, 2013, 2023, 2036, 2052, 2059, 2071, 2090, 2092, 2093, 2094, 2096, 2098, 2112, 2113, 2126, 2138, 2141, 2155, 2158, 2159, 2164, 2166, 2167, 2169, 2171, 2172, 2176, 2188, 2197, 2198, 2216, 2218, 2225, 2230, 2232, 2233, 2241, 2247, 2256, 2272, 2277, 2282, 2296, 2305, 2309, 2315, 2333, 2334, 2343, 2353, 2380, 2383, 2386, 2393, 2406, 2417, 2418, 2420, 2426, 2435, 2450, 2460, 2483, 2499, 2518, 2524, 2540, 2542, 2543, 2546, 2547, 2552, 2562, 2564, 2572, 2576, 2580, 2592, 2604, 2615, 2616, 2621, 2622, 2636, 2639, 2650, 2659, 2679, 2688, 2693, 2700, 2704, 2721, 2730, 2742, 2746, 2752, 2766, 2780, 2803, 2806, 2840, 2843, 2847, 2850, 2857, 2889, 2907, 2915, 2923, 2926, 2934, 2945, 2947, 2954, 2960, 2967, 2971, 2974, 2982, 2990, 3017, 3030, 3032, 3042, 3046, 3063, 3073, 3080, 3081, 3084, 3105, 3106, 3114, 3117, 3128, 3147, 3148, 3156, 3164, 3173, 3190, 3210, 3218, 3239, 3240, 3245, 3249, 3250, 3276, 3282, 3288, 3308, 3319, 3355, 3384, 3404, 3406, 3410, 3412, 3415, 3425, 3431, 3456, 3471, 3507, 3516, 3517, 3520, 3527, 3544, 3557, 3565, 3568, 3569, 3582, 3590, 3595, 3606, 3607, 3617, 3626, 3636, 3637, 3643, 3646, 3662, 3670, 3675, 3676, 3691, 3713, 3721, 3732, 3737, 3739, 3747, 3755, 3775, 3783, 3789, 3796, 3798, 3802, 3808, 3820, 3821, 3837, 3842, 3845, 3855, 3870, 3872, 3878, 3883, 3885, 3894, 3899, 3906, 3911, 3928, 3932, 3937, 3939, 3949, 3951, 3969, 3975, 3984, 3985, 3998, 4000, 4003, 4010, 4012, 4036, 4041, 4043, 4059, 4060, 4079, 4097, 4127, 4137, 4139, 4162, 4163, 4166, 4167, 4170, 4174, 4176, 4177, 4194, 4195, 4207, 4209, 4211, 4213, 4214, 4224, 4237, 4238, 4244, 4251, 4279, 4284, 4291, 4293, 4308, 4313, 4316, 4320, 4331, 4344, 4345, 4346, 4360, 4365, 4370, 4375, 4383, 4386, 4392, 4395, 4417, 4418, 4420, 4426, 4458, 4461, 4464, 4473, 4479, 4486, 4496, 4510, 4511, 4519, 4520, 4527, 4530, 4533, 4550, 4559, 4562, 4569, 4587, 4596, 4603, 4608, 4618, 4624, 4633, 4634, 4644, 4645, 4651, 4665, 4684, 4685, 4687, 4695, 4697, 4698, 4705, 4716, 4736, 4742, 4751, 4752, 4766, 4770, 4775, 4776, 4784, 4792, 4796, 4803, 4808, 4809, 4811, 4821, 4843, 4846, 4853, 4854, 4855, 4864, 4873, 4890, 4898, 4919, 4928, 4938, 4946, 4950, 4955, 4957, 4962, 4988, 4999, 5000, 5002, 5007, 5024, 5036, 5042, 5058, 5102, 5107, 5118, 5129, 5136, 5153, 5161, 5173, 5176, 5181, 5182, 5197, 5199, 5201, 5202, 5205, 5206, 5220, 5222, 5239, 5245, 5247, 5251, 5253, 5255, 5256, 5260, 5271, 5272, 5283, 5297, 5307, 5308, 5327, 5329, 5352, 5353, 5354, 5356, 5357, 5359, 5372, 5373, 5376, 5383, 5389, 5409, 5421, 5430, 5449, 5456, 5473, 5474, 5477, 5479, 5484, 5504, 5507, 5509, 5513, 5527, 5562, 5563, 5572, 5573, 5576, 5580, 5587, 5590, 5593, 5601, 5602, 5617, 5629, 5632, 5644, 5649, 5651, 5671, 5684, 5714, 5730, 5755, 5760, 5773, 5783, 5794, 5804, 5818, 5824, 5827, 5837, 5848, 5877, 5883, 5886, 5891, 5904, 5913, 5914, 5925, 5937, 5938, 5968, 5976, 5988, 5989, 5990, 5999, 6011, 6015, 6017, 6024, 6034, 6039, 6060, 6084, 6089, 6092, 6093, 6100, 6103, 6116, 6123, 6124, 6130, 6148, 6159, 6165, 6178, 6197, 6240, 6242, 6247, 6264, 6275, 6279, 6293, 6324, 6330, 6333, 6334, 6347, 6351, 6367, 6381, 6395, 6402, 6422, 6423, 6433, 6435, 6436, 6442, 6444, 6446, 6450, 6451, 6468, 6470, 6474, 6489, 6500, 6504, 6505, 6511, 6519, 6543, 6556, 6583, 6586, 6603, 6613, 6618, 6621, 6622, 6650, 6669, 6672, 6687, 6698, 6701, 6707, 6708, 6723, 6728, 6740, 6743, 6751, 6755, 6776, 6794, 6814, 6821, 6825, 6833, 6834, 6846, 6854, 6855, 6862, 6863, 6872, 6882, 6899, 6908, 6909, 6913, 6919, 6925, 6934, 6948, 6959, 6965, 6967, 6972, 6973, 6982, 6991, 6999, 7002, 7026, 7041, 7045, 7053, 7058, 7062, 7066, 7076, 7085, 7095, 7132, 7133, 7135, 7139, 7146, 7148, 7161, 7163, 7165, 7169, 7189, 7191, 7207, 7210, 7220, 7221, 7227, 7237, 7248, 7250, 7258, 7270, 7280, 7287, 7289, 7292, 7298, 7301, 7312, 7318, 7319, 7332, 7338, 7349, 7350, 7367, 7371, 7383, 7395, 7399, 7407, 7420, 7433, 7442, 7462, 7476, 7481, 7486, 7509, 7511, 7512, 7520, 7523, 7529, 7531, 7539, 7540, 7546, 7558, 7559, 7568, 7572, 7584, 7588, 7601, 7620, 7626, 7627, 7629, 7634, 7641, 7658, 7662, 7663, 7676, 7679, 7700, 7702, 7708, 7723, 7724, 7728, 7759, 7761, 7778, 7792, 7800, 7811, 7815, 7824, 7829, 7830, 7839, 7849, 7851, 7860, 7898, 7912, 7915, 7919, 7924, 7935, 7938, 7956, 7972, 7988, 7993, 8013, 8017, 8026, 8033, 8044, 8047, 8048, 8053, 8056, 8060, 8071, 8072, 8076, 8079, 8099, 8115, 8121, 8123, 8128, 8156, 8159, 8173, 8177, 8191, 8199, 8200, 8205, 8218, 8221, 8230, 8232, 8234, 8236, 8238, 8252, 8256, 8265, 8279, 8285, 8291, 8298, 8305, 8322, 8349, 8350, 8361, 8389, 8390, 8394, 8400, 8402, 8420, 8421, 8433, 8450, 8453, 8458, 8472, 8476, 8478, 8481, 8497, 8504, 8509, 8515, 8521, 8522, 8542, 8553, 8574, 8581, 8591, 8593, 8603, 8608, 8644, 8650, 8659, 8661, 8692, 8696, 8717, 8720, 8738, 8740, 8749, 8752, 8759, 8763, 8776, 8784, 8791, 8805, 8820, 8840, 8846, 8852, 8859, 8866, 8868, 8881, 8890, 8913, 8931, 8940, 8950, 8954, 8962, 8966, 8969, 8976, 9003, 9006, 9007, 9012, 9052, 9056, 9075, 9077, 9079, 9084, 9095, 9104, 9105, 9108, 9111, 9149, 9169, 9177, 9184, 9185, 9205, 9225, 9226, 9242, 9245, 9259, 9285, 9289, 9290, 9301, 9305, 9324, 9332, 9344, 9359, 9377, 9383, 9385, 9403, 9407, 9419, 9427, 9430, 9434, 9441, 9452, 9483, 9494, 9497, 9499, 9500, 9501, 9504, 9505, 9509, 9515, 9520, 9528, 9529, 9546, 9553, 9562, 9576, 9584, 9605, 9616, 9619, 9627, 9630, 9632, 9633, 9634, 9637, 9649, 9658, 9661, 9666, 9668, 9673, 9677, 9679, 9687, 9705, 9709, 9711, 9714, 9718, 9722, 9754, 9757, 9763, 9766, 9777, 9800, 9803, 9839, 9850, 9852, 9862, 9865, 9873, 9886, 9901, 9905, 9906, 9914, 9921, 9927, 9946, 9947, 9950, 9961, 9965, 9971, 9972, 9978, 9996]
all_together = np.sort(with_1_step + with_2_steps)
# all_together = [20, 37, 12, 35, 21, 0, 28, 59, 9, 19, 13, 18, 5, 32, 26, 38, 2, 49, 65, 24]
with_4_steps = [3, 8, 9, 15, 17, 23, 27, 30, 33, 35, 42, 43, 45, 52, 55, 60, 63, 67, 73, 77, 79, 87, 92, 96, 97, 101, 110, 119, 121, 126, 130, 131, 132, 137, 145, 146, 148, 149, 153, 158, 167, 171, 174, 176, 180, 185, 193, 195, 196, 197, 201, 202, 204, 206, 211, 222, 228, 229, 236, 241, 246, 250, 252, 253, 262, 263, 264, 265, 271, 275, 276, 277, 283, 287, 288, 289, 291, 295, 296, 297, 298, 304, 306, 309, 311, 312, 328, 329, 333, 338, 344, 347, 350, 355, 357, 366, 367, 373, 377, 383, 385, 386, 387, 388, 398, 399, 401, 402, 407, 409, 412, 417, 419, 420, 422, 424, 426, 433, 434, 436, 437, 445, 446, 447, 449, 450, 454, 456, 457, 460, 468, 469, 470, 473, 474, 475, 477, 480, 481, 482, 483, 485, 486, 487, 491, 492, 501, 504, 506, 507, 513, 514, 516, 518, 521, 525, 527, 534, 535, 538, 540, 545, 546, 549, 550, 551, 553, 556, 559, 567, 572, 573, 578, 579, 582, 590, 594, 595, 596, 598, 610, 612, 614, 617, 618, 619, 627, 629, 630, 631, 636, 638, 639, 641, 647, 651, 654, 660, 661, 662, 663, 665, 668, 680, 684, 685, 687, 688, 691, 695, 696, 700, 701, 703, 704, 706, 708, 717, 720, 729, 730, 731, 734, 735, 739, 741, 745, 746, 749, 750, 753, 760, 765, 787, 788, 789, 793, 796, 802, 803, 808, 809, 812, 814, 815, 817, 819, 820, 822, 829, 830, 835, 836, 838, 842, 843, 845, 846, 847, 849, 853, 855, 857, 860, 863, 864, 866, 867, 872, 876, 877, 879, 882, 888, 889, 891, 892, 893, 900, 903, 907, 908, 914, 916, 917, 924, 928, 929, 930, 939, 942, 943, 948, 951, 953, 956, 957, 958, 960, 961, 963, 965, 970, 971, 972, 975, 986, 994, 1004, 1015, 1021, 1022, 1023, 1026, 1031, 1050, 1053, 1054, 1055, 1059, 1061, 1062, 1065, 1066, 1067, 1074, 1075, 1087, 1089, 1091, 1095, 1097, 1100, 1113, 1114, 1115, 1117, 1123, 1125, 1130, 1135, 1142, 1146, 1148, 1149, 1151, 1154, 1166, 1169, 1170, 1173, 1178, 1179, 1180, 1186, 1189, 1190, 1195, 1196, 1197, 1200, 1201, 1203, 1204, 1208, 1213, 1227, 1229, 1231, 1236, 1240, 1242, 1261, 1265, 1268, 1275, 1276, 1280, 1284, 1285, 1286, 1288, 1290, 1298, 1300, 1303, 1307, 1309, 1311, 1312, 1314, 1315, 1316, 1321, 1323, 1328, 1331, 1338, 1339, 1343, 1347, 1350, 1353, 1354, 1358, 1359, 1361, 1362, 1381, 1382, 1386, 1390, 1395, 1408, 1409, 1413, 1416, 1426, 1432, 1437, 1439, 1442, 1443, 1445, 1447, 1448, 1453, 1456, 1458, 1460, 1463, 1465, 1471, 1473, 1474, 1475, 1477, 1481, 1483, 1485, 1488, 1489, 1490, 1491, 1494, 1496, 1499, 1501, 1506, 1507, 1509, 1511, 1512, 1515, 1516, 1528, 1531, 1533, 1535, 1536, 1545, 1546, 1548, 1550, 1552, 1556, 1568, 1573, 1575, 1576, 1577, 1579, 1581, 1585, 1587, 1588, 1591, 1593, 1604, 1608, 1610, 1620, 1621, 1626, 1627, 1630, 1632, 1634, 1637, 1638, 1642, 1647, 1650, 1651, 1654, 1656, 1658, 1661, 1663, 1666, 1668, 1669, 1672, 1674, 1677, 1678, 1680, 1682, 1683, 1685, 1689, 1692, 1693, 1696, 1699, 1701, 1702, 1705, 1708, 1710, 1726, 1732, 1734, 1737, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1751, 1752, 1753, 1754, 1758, 1759, 1762, 1763, 1770, 1776, 1778, 1779, 1781, 1784, 1788, 1791, 1796, 1799, 1801, 1802, 1804, 1805, 1806, 1811, 1815, 1822, 1823, 1825, 1827, 1844, 1846, 1847, 1849, 1860, 1861, 1862, 1866, 1869, 1871, 1873, 1874, 1875, 1878, 1879, 1880, 1882, 1891, 1897, 1901, 1908, 1911, 1913, 1918, 1919, 1921, 1922, 1925, 1927, 1929, 1932, 1933, 1938, 1939, 1941, 1943, 1944, 1950, 1953, 1954, 1960, 1963, 1964, 1965, 1966, 1968, 1970, 1971, 1976, 1979, 1981, 1984, 1985, 1994, 1995, 1997, 1999, 2002, 2005, 2009, 2015, 2018, 2019, 2020, 2028, 2030, 2034, 2039, 2043, 2044, 2045, 2046, 2049, 2051, 2055, 2056, 2057, 2058, 2065, 2067, 2068, 2070, 2074, 2075, 2077, 2078, 2079, 2082, 2083, 2084, 2085, 2087, 2089, 2095, 2100, 2106, 2107, 2116, 2119, 2120, 2123, 2124, 2131, 2134, 2135, 2137, 2140, 2145, 2149, 2151, 2152, 2154, 2160, 2161, 2162, 2168, 2174, 2180, 2182, 2184, 2187, 2190, 2191, 2194, 2199, 2203, 2205, 2209, 2211, 2212, 2214, 2215, 2219, 2228, 2234, 2235, 2238, 2240, 2243, 2244, 2249, 2250, 2251, 2257, 2261, 2264, 2269, 2276, 2279, 2281, 2284, 2285, 2286, 2288, 2292, 2293, 2294, 2295, 2297, 2301, 2302, 2303, 2304, 2306, 2314, 2322, 2326, 2329, 2331, 2335, 2337, 2340, 2344, 2346, 2347, 2350, 2355, 2356, 2362, 2364, 2365, 2369, 2372, 2373, 2374, 2376, 2378, 2379, 2381, 2384, 2387, 2388, 2390, 2392, 2397, 2398, 2401, 2404, 2405, 2409, 2413, 2416, 2419, 2428, 2431, 2437, 2441, 2442, 2443, 2444, 2448, 2458, 2461, 2462, 2463, 2465, 2466, 2467, 2469, 2470, 2472, 2473, 2484, 2487, 2488, 2497, 2500, 2502, 2503, 2504, 2509, 2510, 2511, 2513, 2515, 2517, 2522, 2533, 2535, 2538, 2544, 2545, 2548, 2551, 2554, 2556, 2558, 2559, 2560, 2563, 2566, 2567, 2571, 2577, 2578, 2579, 2581, 2587, 2588, 2590, 2591, 2596, 2598, 2600, 2603, 2605, 2620, 2627, 2629, 2631, 2634, 2635, 2637, 2644, 2648, 2653, 2654, 2655, 2658, 2663, 2669, 2670, 2675, 2680, 2682, 2685, 2686, 2692, 2694, 2696, 2697, 2698, 2702, 2706, 2707, 2708, 2713, 2716, 2717, 2718, 2722, 2723, 2729, 2731, 2734, 2738, 2744, 2747, 2748, 2749, 2750, 2755, 2756, 2758, 2761, 2767, 2774, 2776, 2778, 2781, 2782, 2784, 2787, 2791, 2794, 2800, 2801, 2805, 2808, 2810, 2815, 2816, 2818, 2821, 2822, 2823, 2824, 2828, 2829, 2831, 2836, 2839, 2846, 2848, 2849, 2853, 2861, 2865, 2866, 2870, 2874, 2877, 2880, 2881, 2882, 2887, 2892, 2893, 2901, 2905, 2906, 2908, 2910, 2913, 2919, 2924, 2935, 2936, 2938, 2939, 2946, 2949, 2952, 2956, 2959, 2965, 2973, 2978, 2979, 2984, 2985, 2987, 2988, 2989, 2991, 2996, 2998, 3005, 3006, 3010, 3011, 3013, 3015, 3018, 3019, 3024, 3026, 3034, 3036, 3037, 3038, 3040, 3041, 3043, 3044, 3045, 3051, 3053, 3054, 3055, 3058, 3064, 3065, 3068, 3070, 3071, 3074, 3075, 3077, 3085, 3089, 3099, 3102, 3108, 3109, 3110, 3111, 3115, 3118, 3119, 3123, 3124, 3127, 3138, 3146, 3149, 3151, 3154, 3157, 3159, 3161, 3163, 3168, 3169, 3170, 3171, 3175, 3176, 3177, 3179, 3189, 3209, 3211, 3212, 3216, 3230, 3232, 3234, 3241, 3242, 3243, 3251, 3252, 3253, 3255, 3256, 3262, 3263, 3268, 3269, 3275, 3280, 3281, 3283, 3284, 3285, 3287, 3291, 3293, 3299, 3301, 3309, 3310, 3312, 3313, 3314, 3316, 3317, 3318, 3321, 3324, 3329, 3330, 3334, 3335, 3336, 3338, 3340, 3341, 3344, 3346, 3351, 3354, 3357, 3358, 3359, 3360, 3365, 3369, 3370, 3371, 3372, 3373, 3374, 3375, 3382, 3386, 3387, 3389, 3392, 3394, 3396, 3397, 3399, 3400, 3409, 3411, 3416, 3418, 3419, 3434, 3435, 3440, 3444, 3445, 3448, 3450, 3451, 3460, 3465, 3466, 3467, 3468, 3469, 3476, 3483, 3486, 3489, 3493, 3500, 3501, 3508, 3509, 3512, 3514, 3518, 3521, 3528, 3529, 3531, 3540, 3541, 3543, 3553, 3554, 3555, 3559, 3564, 3567, 3577, 3583, 3586, 3594, 3596, 3597, 3598, 3601, 3603, 3605, 3608, 3609, 3624, 3631, 3632, 3633, 3639, 3642, 3644, 3647, 3656, 3660, 3666, 3669, 3672, 3673, 3683, 3686, 3687, 3692, 3698, 3699, 3701, 3702, 3703, 3704, 3706, 3707, 3709, 3712, 3715, 3720, 3722, 3726, 3727, 3728, 3731, 3734, 3735, 3736, 3741, 3742, 3745, 3749, 3752, 3753, 3754, 3757, 3758, 3759, 3760, 3763, 3764, 3767, 3770, 3771, 3779, 3780, 3787, 3790, 3792, 3793, 3795, 3800, 3806, 3814, 3816, 3822, 3823, 3827, 3831, 3832, 3836, 3838, 3839, 3847, 3857, 3858, 3859, 3867, 3868, 3877, 3880, 3881, 3882, 3886, 3888, 3891, 3892, 3896, 3900, 3902, 3903, 3907, 3908, 3910, 3913, 3916, 3919, 3924, 3934, 3938, 3944, 3947, 3948, 3950, 3954, 3966, 3968, 3977, 3981, 3987, 3990, 3993, 3994, 3996, 4007, 4009, 4016, 4017, 4019, 4021, 4023, 4024, 4025, 4026, 4028, 4030, 4032, 4033, 4034, 4035, 4039, 4040, 4046, 4047, 4049, 4050, 4054, 4057, 4061, 4062, 4066, 4068, 4069, 4076, 4077, 4081, 4082, 4084, 4086, 4089, 4093, 4094, 4096, 4098, 4099, 4104, 4106, 4107, 4108, 4113, 4114, 4116, 4119, 4121, 4122, 4124, 4126, 4133, 4134, 4140, 4141, 4142, 4145, 4150, 4155, 4156, 4171, 4172, 4173, 4179, 4180, 4182, 4185, 4188, 4190, 4191, 4192, 4193, 4196, 4197, 4198, 4204, 4206, 4210, 4212, 4215, 4222, 4228, 4230, 4234, 4235, 4239, 4243, 4247, 4248, 4249, 4250, 4253, 4255, 4257, 4258, 4260, 4261, 4269, 4273, 4274, 4275, 4280, 4287, 4290, 4298, 4300, 4304, 4306, 4307, 4312, 4314, 4315, 4319, 4321, 4325, 4326, 4327, 4335, 4341, 4348, 4351, 4352, 4354, 4355, 4358, 4362, 4363, 4368, 4369, 4374, 4376, 4377, 4380, 4381, 4382, 4391, 4393, 4399, 4400, 4401, 4404, 4405, 4407, 4409, 4413, 4419, 4421, 4427, 4428, 4429, 4435, 4436, 4437, 4439, 4440, 4441, 4443, 4447, 4452, 4454, 4455, 4456, 4457, 4459, 4469, 4471, 4472, 4474, 4475, 4478, 4482, 4484, 4487, 4488, 4492, 4497, 4498, 4499, 4500, 4502, 4504, 4507, 4508, 4513, 4514, 4516, 4524, 4525, 4528, 4529, 4532, 4534, 4537, 4538, 4539, 4544, 4546, 4549, 4555, 4557, 4564, 4567, 4571, 4573, 4576, 4577, 4578, 4582, 4583, 4584, 4586, 4593, 4601, 4604, 4605, 4615, 4619, 4622, 4625, 4630, 4635, 4638, 4643, 4650, 4652, 4655, 4657, 4658, 4664, 4668, 4682, 4688, 4689, 4690, 4692, 4704, 4706, 4715, 4719, 4720, 4721, 4723, 4727, 4728, 4732, 4737, 4740, 4745, 4754, 4755, 4760, 4761, 4763, 4764, 4768, 4769, 4777, 4783, 4789, 4791, 4794, 4797, 4799, 4802, 4804, 4805, 4812, 4818, 4820, 4822, 4823, 4829, 4834, 4836, 4839, 4844, 4847, 4849, 4859, 4860, 4867, 4868, 4876, 4878, 4880, 4884, 4885, 4886, 4887, 4888, 4892, 4893, 4894, 4899, 4903, 4904, 4905, 4907, 4908, 4910, 4912, 4913, 4916, 4917, 4918, 4921, 4922, 4924, 4932, 4944, 4945, 4959, 4961, 4964, 4965, 4967, 4970, 4971, 4978, 4981, 4984, 4986, 4987, 4990, 4993, 4995, 4998, 5001, 5008, 5009, 5016, 5017, 5027, 5033, 5043, 5045, 5048, 5049, 5051, 5057, 5063, 5065, 5066, 5068, 5074, 5075, 5081, 5083, 5087, 5089, 5091, 5092, 5093, 5096, 5103, 5104, 5106, 5111, 5112, 5120, 5122, 5123, 5131, 5132, 5133, 5137, 5140, 5141, 5142, 5144, 5147, 5152, 5156, 5157, 5159, 5164, 5166, 5167, 5168, 5170, 5171, 5174, 5178, 5185, 5191, 5204, 5207, 5209, 5219, 5223, 5224, 5225, 5228, 5231, 5233, 5234, 5237, 5238, 5240, 5241, 5242, 5243, 5249, 5261, 5262, 5265, 5267, 5269, 5273, 5276, 5282, 5287, 5290, 5294, 5296, 5299, 5305, 5306, 5311, 5313, 5315, 5320, 5323, 5325, 5328, 5335, 5337, 5338, 5342, 5344, 5345, 5348, 5351, 5358, 5360, 5362, 5363, 5366, 5369, 5377, 5379, 5384, 5385, 5387, 5388, 5390, 5392, 5403, 5405, 5413, 5416, 5422, 5426, 5427, 5429, 5435, 5437, 5450, 5451, 5454, 5455, 5460, 5461, 5462, 5466, 5468, 5470, 5471, 5480, 5482, 5483, 5489, 5492, 5497, 5502, 5511, 5512, 5516, 5520, 5521, 5522, 5523, 5529, 5533, 5538, 5539, 5541, 5547, 5548, 5557, 5558, 5567, 5569, 5571, 5577, 5582, 5583, 5584, 5589, 5595, 5603, 5605, 5608, 5611, 5612, 5613, 5614, 5615, 5622, 5626, 5633, 5635, 5637, 5640, 5643, 5648, 5652, 5656, 5664, 5665, 5666, 5667, 5669, 5670, 5674, 5685, 5687, 5690, 5692, 5693, 5700, 5701, 5704, 5707, 5712, 5713, 5715, 5721, 5722, 5728, 5729, 5731, 5732, 5733, 5736, 5737, 5739, 5743, 5744, 5745, 5746, 5747, 5749, 5751, 5752, 5754, 5758, 5771, 5774, 5776, 5777, 5778, 5780, 5782, 5785, 5790, 5795, 5800, 5807, 5810, 5811, 5813, 5816, 5820, 5823, 5828, 5832, 5840, 5846, 5847, 5852, 5858, 5874, 5879, 5881, 5882, 5887, 5888, 5889, 5894, 5895, 5896, 5898, 5900, 5903, 5905, 5908, 5909, 5915, 5917, 5918, 5920, 5923, 5926, 5931, 5934, 5944, 5945, 5950, 5952, 5955, 5963, 5966, 5971, 5973, 5975, 5981, 6000, 6001, 6002, 6005, 6006, 6008, 6010, 6014, 6016, 6018, 6020, 6025, 6029, 6031, 6033, 6035, 6037, 6040, 6041, 6044, 6048, 6057, 6058, 6061, 6063, 6064, 6065, 6069, 6070, 6073, 6078, 6079, 6080, 6081, 6087, 6090, 6096, 6098, 6099, 6101, 6102, 6104, 6107, 6109, 6112, 6114, 6115, 6120, 6126, 6128, 6131, 6137, 6139, 6141, 6145, 6155, 6158, 6160, 6172, 6174, 6176, 6185, 6186, 6200, 6201, 6203, 6204, 6205, 6206, 6207, 6209, 6214, 6216, 6217, 6222, 6225, 6229, 6230, 6231, 6245, 6248, 6253, 6254, 6259, 6261, 6272, 6273, 6274, 6276, 6278, 6286, 6287, 6288, 6291, 6294, 6295, 6299, 6301, 6302, 6303, 6308, 6310, 6312, 6315, 6319, 6320, 6325, 6327, 6329, 6332, 6339, 6343, 6345, 6349, 6352, 6353, 6354, 6355, 6357, 6358, 6360, 6362, 6365, 6368, 6369, 6371, 6372, 6373, 6376, 6380, 6383, 6386, 6388, 6389, 6397, 6399, 6400, 6401, 6403, 6404, 6405, 6406, 6412, 6415, 6416, 6417, 6420, 6425, 6427, 6428, 6434, 6438, 6440, 6443, 6445, 6447, 6452, 6456, 6457, 6458, 6460, 6461, 6463, 6467, 6469, 6477, 6482, 6483, 6484, 6487, 6490, 6491, 6492, 6493, 6495, 6496, 6501, 6503, 6512, 6514, 6517, 6525, 6527, 6528, 6531, 6533, 6534, 6544, 6552, 6557, 6563, 6566, 6568, 6571, 6575, 6578, 6581, 6582, 6587, 6589, 6592, 6600, 6610, 6612, 6615, 6624, 6625, 6630, 6634, 6637, 6646, 6647, 6648, 6653, 6655, 6656, 6658, 6661, 6663, 6664, 6667, 6674, 6675, 6678, 6680, 6681, 6682, 6683, 6684, 6688, 6692, 6696, 6697, 6702, 6710, 6711, 6712, 6713, 6720, 6724, 6726, 6727, 6730, 6731, 6732, 6734, 6735, 6736, 6737, 6741, 6746, 6748, 6749, 6754, 6757, 6763, 6768, 6773, 6774, 6778, 6779, 6781, 6783, 6787, 6788, 6796, 6797, 6798, 6801, 6802, 6805, 6809, 6812, 6817, 6826, 6837, 6839, 6844, 6847, 6850, 6851, 6852, 6856, 6868, 6869, 6870, 6876, 6878, 6891, 6892, 6893, 6894, 6898, 6900, 6903, 6906, 6915, 6917, 6927, 6929, 6938, 6939, 6940, 6941, 6947, 6957, 6960, 6961, 6962, 6963, 6964, 6966, 6977, 6979, 6981, 6985, 6986, 6987, 6990, 6997, 7005, 7009, 7017, 7018, 7020, 7021, 7022, 7023, 7027, 7028, 7029, 7030, 7035, 7038, 7047, 7051, 7052, 7059, 7060, 7061, 7064, 7065, 7068, 7075, 7077, 7078, 7088, 7089, 7090, 7094, 7098, 7101, 7103, 7108, 7117, 7120, 7121, 7124, 7125, 7131, 7140, 7143, 7145, 7151, 7152, 7153, 7156, 7157, 7160, 7166, 7167, 7177, 7178, 7179, 7183, 7184, 7188, 7193, 7194, 7199, 7200, 7206, 7208, 7216, 7222, 7223, 7225, 7231, 7232, 7233, 7234, 7235, 7236, 7240, 7243, 7244, 7247, 7251, 7253, 7259, 7260, 7262, 7267, 7269, 7271, 7272, 7275, 7277, 7278, 7279, 7282, 7291, 7299, 7300, 7302, 7305, 7306, 7308, 7314, 7316, 7320, 7322, 7323, 7325, 7330, 7333, 7343]
all_together_dict = {}
for i in with_1_step:
    all_together_dict[i] = 1
for i in with_2_steps:
    all_together_dict[i] = 2
# sort all_together_dict by keys
all_together_dict = {k: all_together_dict[k] for k in sorted(all_together_dict)}


def check_invalid(e):
    """
    given 5*5 grid, find invalid actions
    agent value: 0.1608
    box value: 0.8431
    target value: 0.949
    wall value: 1.0
    empty cell value: 0.0
    There are 8 optional actions: push up, push down, push left, push right, pull up, pull down, pull left, pull right
    """
    # indices of the agent, the box and the goal
    e = np.asarray(e.reshape(5, 5))
    # padding the grid with walls, means make it 7*7
    e = np.pad(e, ((1, 1), (1, 1)), 'constant', constant_values=1.0)
    # round for 4 digits
    e = np.round(e, 4)
    # raise error if there is no agent
    box_idx = [np.where(abs(e - box_value) < 0.01)[0][0], np.where(abs(e - box_value) < 0.01)[1][0]]
    if agent_value in e:
        agent_idx = [np.where(abs(e - agent_value) < 0.01)[0][0], np.where(abs(e - agent_value) < 0.01)[1][0]]
        # goal_idx = [np.where(abs(e - 0.949) < 0.01)[0][0], np.where(abs(e - 0.949) < 0.01)[1][0]]
    else:  # the agent in the same cell with the goal
        agent_idx = [np.where(abs(e - agent_in_goal_value) < 0.01)[0][0], np.where(abs(e - agent_in_goal_value) < 0.01)[1][0]]

    invalid_actions = []
    for a in range(8):
        if a == 0: # push up
            upper_agent_idx = [agent_idx[0] - 1, agent_idx[1]]
            upper_box_idx = [box_idx[0] - 1, box_idx[1]]
            upper_agent_cell = e[upper_agent_idx[0], upper_agent_idx[1]]
            # if upper_agent_cell isn't a box, then it is an invalid action
            if upper_agent_cell == 1.0 or upper_agent_cell == target_value:  # or upper_agent_cell != box_value:
                invalid_actions.append(a)
                continue
            elif upper_agent_cell == box_value:
                upper_box_cell = e[upper_box_idx[0], upper_box_idx[1]]
                if upper_box_cell == 1.0:
                    invalid_actions.append(a)
                    continue

        elif a == 1: # push down
            lower_agent_idx = [agent_idx[0] + 1, agent_idx[1]]
            lower_box_idx = [box_idx[0] + 1, box_idx[1]]
            lower_agent_cell = e[lower_agent_idx[0], lower_agent_idx[1]]
            if lower_agent_cell == 1.0 or lower_agent_cell == target_value:  # or lower_agent_cell != box_value:
                invalid_actions.append(a)
                continue
            elif lower_agent_cell == box_value:
                lower_box_cell = e[lower_box_idx[0], lower_box_idx[1]]
                if lower_box_cell == 1.0:
                    invalid_actions.append(a)
                    continue

        elif a == 2: # push left
            left_agent_idx = [agent_idx[0], agent_idx[1] - 1]
            left_box_idx = [box_idx[0], box_idx[1] - 1]
            left_agent_cell = e[left_agent_idx[0], left_agent_idx[1]]
            if left_agent_cell == 1.0 or left_agent_cell == target_value:  # or left_agent_cell != box_value:
                invalid_actions.append(a)
                continue
            elif left_agent_cell == box_value:
                left_box_cell = e[left_box_idx[0], left_box_idx[1]]
                if left_box_cell == 1.0:
                    invalid_actions.append(a)
                    continue

        elif a == 3: # push right
            right_agent_idx = [agent_idx[0], agent_idx[1] + 1]
            right_box_idx = [box_idx[0], box_idx[1] + 1]
            right_agent_cell = e[right_agent_idx[0], right_agent_idx[1]]
            if right_agent_cell == 1.0 or right_agent_cell == target_value:  # or right_agent_cell != box_value:
                invalid_actions.append(a)
                continue
            elif right_agent_cell == box_value:
                right_box_cell = e[right_box_idx[0], right_box_idx[1]]
                if right_box_cell == 1.0:
                    invalid_actions.append(a)
                    continue

        elif a == 4:  # pull up
            upper_agent_idx = [agent_idx[0] - 1, agent_idx[1]]
            upper_box_idx = [box_idx[0] - 1, box_idx[1]]
            upper_agent_cell = e[upper_agent_idx[0], upper_agent_idx[1]]
            upper_box_cell = e[upper_box_idx[0], upper_box_idx[1]]
            if upper_agent_cell == 1.0 or upper_agent_cell == target_value or upper_box_cell != agent_value:
                invalid_actions.append(a)
                continue
            elif upper_agent_cell == box_value:
                upper_box_cell = e[upper_box_idx[0], upper_box_idx[1]]
                if upper_box_cell == 1.0:
                    invalid_actions.append(a)
                    continue

        elif a == 5:  # pull down
            lower_agent_idx = [agent_idx[0] + 1, agent_idx[1]]
            lower_box_idx = [box_idx[0] + 1, box_idx[1]]
            lower_agent_cell = e[lower_agent_idx[0], lower_agent_idx[1]]
            lower_box_cell = e[lower_box_idx[0], lower_box_idx[1]]
            if lower_agent_cell == 1.0 or lower_agent_cell == target_value or lower_box_cell != agent_value:
                invalid_actions.append(a)
                continue
            elif lower_agent_cell == box_value:
                lower_box_cell = e[lower_box_idx[0], lower_box_idx[1]]
                if lower_box_cell == 1.0:
                    invalid_actions.append(a)
                    continue

        elif a == 6:  # pull left
            left_agent_idx = [agent_idx[0], agent_idx[1] - 1]
            left_box_idx = [box_idx[0], box_idx[1] - 1]
            left_agent_cell = e[left_agent_idx[0], left_agent_idx[1]]
            left_box_cell = e[left_box_idx[0], left_box_idx[1]]
            if left_agent_cell == 1.0 or left_agent_cell == target_value or left_box_cell != agent_value:
                invalid_actions.append(a)
                continue
            elif left_agent_cell == box_value:
                left_box_cell = e[left_box_idx[0], left_box_idx[1]]
                if left_box_cell == 1.0:
                    invalid_actions.append(a)
                    continue

        elif a == 7:  # pull right
            right_agent_idx = [agent_idx[0], agent_idx[1] + 1]
            right_box_idx = [box_idx[0], box_idx[1] + 1]
            right_agent_cell = e[right_agent_idx[0], right_agent_idx[1]]
            right_box_cell = e[right_box_idx[0], right_box_idx[1]]
            if right_agent_cell == 1.0 or right_agent_cell == target_value or right_box_cell != agent_value:
                invalid_actions.append(a)
                continue
            elif right_agent_cell == box_value:
                right_box_cell = e[right_box_idx[0], right_box_idx[1]]
                if right_box_cell == 1.0:
                    invalid_actions.append(a)
                    continue

    return invalid_actions


def box2target_change_reward(state, a, PR=10, CR=0.25, invalid_actions=None):
    # indices of the agent, the box and the goal
    if invalid_actions is None:
        invalid_actions = []
    if a in invalid_actions:
        return None
    state = np.asarray(state.reshape(5, 5))
    agent_in_target = False
    box_idx = [np.where(abs(state - box_value) < 0.01)[0][0], np.where(abs(state - box_value) < 0.01)[1][0]]
    if agent_in_goal_value in state:
        agent_idx = [np.where(abs(state - agent_in_goal_value) < 0.01)[0][0], np.where(abs(state - agent_in_goal_value) < 0.01)[1][0]]
        goal_idx = agent_idx
        agent_in_target = True
    else:
        agent_idx = [np.where(abs(state - agent_value) < 0.01)[0][0], np.where(abs(state - agent_value) < 0.01)[1][0]]
        goal_idx = [np.where(abs(state - target_value) < 0.01)[0][0], np.where(abs(state - target_value) < 0.01)[1][0]]
    # based on a and state find next state

    # for each action there are 3 scenarios: only agent move, agent and box move and agent and box move to goal
    next_state = np.copy(state)
    if a == 0:  # push up
        # only agent move if box is not above agent or they in a different column
        if box_idx[0] != agent_idx[0] - 1 or box_idx[1] != agent_idx[1]:
            next_state[agent_idx[0] - 1, agent_idx[1]] = agent_value
            next_state[agent_idx[0], agent_idx[1]] = 0.0
        # agent and box move if box is above agent
        else:
            next_state[box_idx[0], box_idx[1]] = agent_value
            next_state[agent_idx[0], agent_idx[1]] = 0.0
            next_state[box_idx[0] - 1, box_idx[1]] = box_value
            # agent and box move to goal if box is above agent and goal is above box
            if box_idx[0] == goal_idx[0] + 1 and box_idx[1] == goal_idx[1]:
                next_state[goal_idx[0], goal_idx[1]] = box_in_goal_value

    elif a == 1:  # push down
        # only agent move if box is not below agent or they in a different column
        if box_idx[0] != agent_idx[0] + 1 or box_idx[1] != agent_idx[1]:
            next_state[agent_idx[0] + 1, agent_idx[1]] = agent_value
            next_state[agent_idx[0], agent_idx[1]] = 0.0
        # agent and box move if box is below agent
        else:
            next_state[box_idx[0], box_idx[1]] = agent_value
            next_state[agent_idx[0], agent_idx[1]] = 0.0
            next_state[box_idx[0] + 1, box_idx[1]] = box_value
            # agent and box move to goal if box is below agent and goal is below box
            if box_idx[0] == goal_idx[0] - 1 and box_idx[1] == goal_idx[1]:
                next_state[goal_idx[0], goal_idx[1]] = box_in_goal_value

    elif a == 2:  # push left
        # only agent move if box is not left of agent or they in a different row
        if box_idx[1] != agent_idx[1] - 1 or box_idx[0] != agent_idx[0]:
            next_state[agent_idx[0], agent_idx[1] - 1] = agent_value
            next_state[agent_idx[0], agent_idx[1]] = 0.0
        # agent and box move if box is left of agent
        else:
            next_state[box_idx[0], box_idx[1]] = agent_value
            next_state[agent_idx[0], agent_idx[1]] = 0.0
            next_state[box_idx[0], box_idx[1] - 1] = box_value
            # agent and box move to goal if box is left of agent and goal is left of box
            if box_idx[0] == goal_idx[0] and box_idx[1] == goal_idx[1] + 1:
                next_state[goal_idx[0], goal_idx[1]] = box_in_goal_value

    elif a == 3:  # push right
        # only agent move if box is not right of agent or they in a different row
        if box_idx[1] != agent_idx[1] + 1 or box_idx[0] != agent_idx[0]:
            next_state[agent_idx[0], agent_idx[1] + 1] = agent_value
            next_state[agent_idx[0], agent_idx[1]] = 0.0
        # agent and box move if box is right of agent
        else:
            next_state[box_idx[0], box_idx[1]] = agent_value
            next_state[agent_idx[0], agent_idx[1]] = 0.0
            next_state[box_idx[0], box_idx[1] + 1] = box_value
            # agent and box move to goal if box is right of agent and goal is right of box
            if box_idx[0] == goal_idx[0] and box_idx[1] == goal_idx[1] - 1:
                next_state[goal_idx[0], goal_idx[1]] = box_in_goal_value

    # in pull actions, there are only 2 scenarios: only agent move and agent and box move
    elif a == 4:  # pull up
        # only agent move if box is not below agent or they in a different column
        # if agent take pull but box is in the other size of pulling, it's push
        # if it's actually push
        if box_idx[0] == agent_idx[0] - 1 and box_idx[1] == agent_idx[1]:
            next_state[box_idx[0], box_idx[1]] = agent_value
            next_state[agent_idx[0], agent_idx[1]] = 0.0
            next_state[box_idx[0] - 1, box_idx[1]] = box_value
            # agent and box move to goal if box is above agent and goal is above box
            if box_idx[0] == goal_idx[0] - 1 and box_idx[1] == goal_idx[1]:
                next_state[goal_idx[0], goal_idx[1]] = box_in_goal_value
        elif box_idx[0] != agent_idx[0] + 1 or box_idx[1] != agent_idx[1]:
            next_state[agent_idx[0] - 1, agent_idx[1]] = agent_value
            next_state[agent_idx[0], agent_idx[1]] = 0.0
        # agent and box move if box is below agent
        else:
            next_state[agent_idx[0] - 1, agent_idx[1]] = agent_value
            next_state[agent_idx[0], agent_idx[1]] = box_value
            next_state[box_idx[0] - 1, box_idx[1]] = 0.0

    elif a == 5:  # pull down
        # only agent move if box is not above agent or they in a different column
        # if agent take pull but box is in the other size of pulling, it's push
        if box_idx[0] == agent_idx[0] + 1 and box_idx[1] == agent_idx[1]:
            next_state[box_idx[0], box_idx[1]] = agent_value
            next_state[agent_idx[0], agent_idx[1]] = 0.0
            next_state[box_idx[0] + 1, box_idx[1]] = box_value
            # agent and box move to goal if box is below agent and goal is below box
            if box_idx[0] == goal_idx[0] + 1 and box_idx[1] == goal_idx[1]:
                next_state[goal_idx[0], goal_idx[1]] = box_in_goal_value
        elif box_idx[0] != agent_idx[0] - 1 or box_idx[1] != agent_idx[1]:
            next_state[agent_idx[0] + 1, agent_idx[1]] = agent_value
            next_state[agent_idx[0], agent_idx[1]] = 0.0
        # agent and box move if box is above agent
        else:
            next_state[agent_idx[0] + 1, agent_idx[1]] = agent_value
            next_state[agent_idx[0], agent_idx[1]] = box_value
            next_state[box_idx[0] + 1, box_idx[1]] = 0.0

    elif a == 6:  # pull left
        # only agent move if box is not right of agent or they in a different row
        # if agent take pull but box is in the other size of pulling, it's push
        if box_idx[1] == agent_idx[1] - 1 and box_idx[0] == agent_idx[0]:
            next_state[box_idx[0], box_idx[1]] = agent_value
            next_state[agent_idx[0], agent_idx[1]] = 0.0
            next_state[box_idx[0], box_idx[1] - 1] = box_value
            # agent and box move to goal if box is left of agent and goal is left of box
            if box_idx[0] == goal_idx[0] and box_idx[1] == goal_idx[1] + 1:
                next_state[goal_idx[0], goal_idx[1]] = box_in_goal_value
        elif box_idx[1] != agent_idx[1] + 1 or box_idx[0] != agent_idx[0]:
            next_state[agent_idx[0], agent_idx[1] - 1] = agent_value
            next_state[agent_idx[0], agent_idx[1]] = 0.0
        # agent and box move if box is right of agent
        else:
            next_state[agent_idx[0], agent_idx[1] - 1] = agent_value
            next_state[agent_idx[0], agent_idx[1]] = box_value
            next_state[box_idx[0], box_idx[1] - 1] = 0.0

    elif a == 7:  # pull right
        # only agent move if box is not left of agent or they in a different row
        # if agent take pull but box is in the other size of pulling, it's push
        if box_idx[1] == agent_idx[1] + 1 and box_idx[0] == agent_idx[0]:
            next_state[box_idx[0], box_idx[1]] = agent_value
            next_state[agent_idx[0], agent_idx[1]] = 0.0
            next_state[box_idx[0], box_idx[1] + 1] = box_value
            # agent and box move to goal if box is right of agent and goal is right of box
            if box_idx[0] == goal_idx[0] and box_idx[1] == goal_idx[1] - 1:
                next_state[goal_idx[0], goal_idx[1]] = box_in_goal_value
        elif box_idx[1] != agent_idx[1] - 1 or box_idx[0] != agent_idx[0]:
            next_state[agent_idx[0], agent_idx[1] + 1] = agent_value
            next_state[agent_idx[0], agent_idx[1]] = 0.0
        # agent and box move if box is left of agent
        else:
            next_state[agent_idx[0], agent_idx[1] + 1] = agent_value
            next_state[agent_idx[0], agent_idx[1]] = box_value
            next_state[box_idx[0], box_idx[1] + 1] = 0.0

    # if box_in_target is True, update next_state
    if agent_in_target:
        next_state[goal_idx[0], goal_idx[1]] = target_value
    # if box not in next state - the puzzle is solved, return PR
    if box_value not in next_state:
        return PR

    agent_idx_n = [np.where(abs(next_state - agent_value) < 0.01)[0][0], np.where(abs(next_state - agent_value) < 0.01)[1][0]]
    box_idx_n = [np.where(abs(next_state - box_value) < 0.01)[0][0], np.where(abs(next_state - box_value) < 0.01)[1][0]]

    # calc manhattan distance between agent and box
    a2b_s = abs(agent_idx[0] - box_idx[0]) + abs(agent_idx[1] - box_idx[1])
    a2b_n = abs(agent_idx_n[0] - box_idx_n[0]) + abs(agent_idx_n[1] - box_idx_n[1])
    b2t_s = abs(box_idx[0] - goal_idx[0]) + abs(box_idx[1] - goal_idx[1])
    b2t_n = abs(box_idx_n[0] - goal_idx[0]) + abs(box_idx_n[1] - goal_idx[1])

    # if box is closer to goal in next state - return CR
    if b2t_n < b2t_s:
        return CR * 2
    # if box is further from goal in next state - return -CR
    elif b2t_n > b2t_s:
        return -CR * 2
    # if box is not closer or further from goal in next state, but agent is closer to box in next state - return CR
    elif b2t_n == b2t_s and a2b_n < a2b_s:
        return CR
    # if box is not closer or further from goal in next state, but agent is further from box in next state - return -CR
    elif b2t_n == b2t_s and a2b_n > a2b_s:
        # if agent near the box - don't punish
        if agent_idx_n[0] == box_idx_n[0] or agent_idx_n[1] == box_idx_n[1]:
            return CR / 4
        else:
            return -CR
    # if box is not closer or further from goal in next state, and agent is not closer or further from target in next state - return 0
    else:
        return 0


# action rotation map, rotation is against the clock
# push up (0) -> push left (2) -> push down (1) -> push right (3)
# pull up (4) -> pull left (6) -> pull down (5) -> pull right (7)
action_rotation_map = {
    0: 3,
    1: 2,
    2: 0,
    3: 1,
    4: 7,
    5: 6,
    6: 4,
    7: 5
}

action_rotation_map_ft = {
    0: 2,
    1: 3,
    2: 1,
    3: 0
}

# rotate action horizontally
action_flip_map = {
    0: 0,
    1: 1,
    2: 3,
    3: 2,
    4: 4,
    5: 5,
    6: 7,
    7: 6
}


def create_one_hot_state(state):
    '''
    Given 5*5 tensor, create one hot state, means the output is (1, 5, 5, 5) tensor
    empty cell = [1, 0, 0, 0, 0]
    wall = [0, 1, 0, 0, 0]
    box = [0, 0, 1, 0, 0]
    target = [0, 0, 0, 1, 0]
    agent = [0, 0, 0, 0, 1]
    '''
    # if state is (1, 5, 5) tensor, delete batch dimension
    if len(state.shape) == 3:
        state = state[0]
    one_hot_state = torch.zeros((1, 5, 5, 5), dtype=torch.float32)
    # first dimension is for Batch, dim 1,2 are for state, dim 3 is for one hot
    if len(state.shape) == 1:
        return one_hot_state
    for i in range(5):
        for j in range(5):
            if state[i, j] == 0.0:
                one_hot_state[0, i, j, 0] = 1.0
            elif state[i, j] == 1.0:
                one_hot_state[0, i, j, 1] = 1.0
            elif state[i, j] == box_value:
                one_hot_state[0, i, j, 2] = 1.0
            elif state[i, j] == target_value:
                one_hot_state[0, i, j, 3] = 1.0
            elif state[i, j] == agent_value:
                one_hot_state[0, i, j, 4] = 1.0

    return one_hot_state


# run on all images in puzzles1 folder, and create an array with all numbers from filenames
# each file is "img_XXX.png" where XXX is the number of the puzzle
# numbers are between 1 and 10000
import os
files = os.listdir('puzzles1')
puzzles = []
for file in files:
    init = 4
    end = file.find('.')
    puzzles.append(int(file[init:end]))
# sort
puzzles.sort()


def generate_direction_room_soft(e):
    '''
    Get a 5*5 grid state which the agent can push the box to target in 1 step,
    check if 6 more states are valid - all sides of box, includes diagonal, but no the agent or target cells
    Actions are: push up (0), push left (2), push down (1), push right (3)
    :param e:
    :return:
    '''
    # indices of the agent, the box and the goal
    e = np.asarray(e.reshape(5, 5))
    # padding the grid with walls, means make it 7*7
    e = np.pad(e, ((1, 1), (1, 1)), 'constant', constant_values=1.0)
    # round for 4 digits
    e = np.round(e, 4)
    box_idx = [np.where(abs(e - box_value) < 0.01)[0][0], np.where(abs(e - box_value) < 0.01)[1][0]]
    agent_idx = [np.where(abs(e - agent_value) < 0.01)[0][0], np.where(abs(e - agent_value) < 0.01)[1][0]]
    goal_idx = [np.where(abs(e - target_value) < 0.01)[0][0], np.where(abs(e -target_value) < 0.01)[1][0]]

    push_up = 0
    push_left = 2
    push_down = 1
    push_right = 3

    # assert that the box is near target, and the agent is near the box in the same row or column
    # there are 4 possible cases:
    # 1. target, box, agent
    # 2. agent, box, target
    # 3. target above box, agent below box
    # 4. target below box, agent above box
    is_tba_h = (box_idx[0] == goal_idx[0] and box_idx[1] == goal_idx[1] + 1 and agent_idx[0] == box_idx[0] and agent_idx[1] == box_idx[1] + 1)
    is_abt_h = (box_idx[0] == goal_idx[0] and box_idx[1] == goal_idx[1] - 1 and agent_idx[0] == box_idx[0] and agent_idx[1] == box_idx[1] - 1)
    is_tba_v = (box_idx[0] == goal_idx[0] + 1 and box_idx[1] == goal_idx[1] and agent_idx[0] == box_idx[0] + 1 and agent_idx[1] == box_idx[1])
    is_abt_v = (box_idx[0] == goal_idx[0] - 1 and box_idx[1] == goal_idx[1] and agent_idx[0] == box_idx[0] - 1 and agent_idx[1] == box_idx[1])
    assert is_tba_h or is_abt_h or is_tba_v or is_abt_v

    new_states = []
    new_targets = []

    if is_abt_h:
        # box is to the left of the target, agent is to the left of the box:
        # current state:
        # 1 1 1 1 1 1 1
        # 1 0 0 0 0 0 1
        # 1 0 0 0 0 0 1
        # 1 0 A B T 0 1
        # 1 0 0 0 0 0 1
        # 1 0 0 0 0 0 1
        # 1 1 1 1 1 1 1

        # case 1: agent one cell up, action - move down:
        # 1 1 1 1 1 1 1
        # 1 0 0 0 0 0 1
        # 1 0 A 0 0 0 1
        # 1 0 0 B T 0 1
        # 1 0 0 0 0 0 1
        # 1 0 0 0 0 0 1
        # 1 1 1 1 1 1 1
        new_agent_idx = [agent_idx[0] - 1, agent_idx[1]]
        # check if this is an empty cell
        if e[new_agent_idx[0], new_agent_idx[1]] == empty_value:
            new_e = np.copy(e)
            new_e[agent_idx[0], agent_idx[1]] = empty_value
            new_e[new_agent_idx[0], new_agent_idx[1]] = agent_value
            new_states.append(new_e)
            new_targets.append(push_down)

            # case 2: agent one cell up from the last update state, action - move down:
            # 1 1 1 1 1 1 1
            # 1 0 A 0 0 0 1
            # 1 0 0 0 0 0 1
            # 1 0 0 B T 0 1
            # 1 0 0 0 0 0 1
            # 1 0 0 0 0 0 1
            # 1 1 1 1 1 1 1
            new_agent_idx = [agent_idx[0] - 2, agent_idx[1]]
            # check if this is an empty cell
            if e[new_agent_idx[0], new_agent_idx[1]] == empty_value:
                new_e = np.copy(e)
                new_e[agent_idx[0], agent_idx[1]] = empty_value
                new_e[new_agent_idx[0], new_agent_idx[1]] = agent_value
                new_states.append(new_e)
                new_targets.append(push_down)

        # case 3: agent one cell down, action - move up:
        # 1 1 1 1 1 1 1
        # 1 0 0 0 0 0 1
        # 1 0 0 0 0 0 1
        # 1 0 0 B T 0 1
        # 1 0 A 0 0 0 1
        # 1 0 0 0 0 0 1
        # 1 1 1 1 1 1 1
        new_agent_idx = [agent_idx[0] + 1, agent_idx[1]]
        # check if this is an empty cell
        if e[new_agent_idx[0], new_agent_idx[1]] == empty_value:
            new_e = np.copy(e)
            new_e[agent_idx[0], agent_idx[1]] = empty_value
            new_e[new_agent_idx[0], new_agent_idx[1]] = agent_value
            new_states.append(new_e)
            new_targets.append(push_up)

            # case 4: agent one cell down from the last update state, action - move up:
            # 1 1 1 1 1 1 1
            # 1 0 0 0 0 0 1
            # 1 0 0 0 0 0 1
            # 1 0 0 B T 0 1
            # 1 0 0 0 0 0 1
            # 1 0 A 0 0 0 1
            # 1 1 1 1 1 1 1
            new_agent_idx = [agent_idx[0] + 2, agent_idx[1]]
            # check if this is an empty cell
            if e[new_agent_idx[0], new_agent_idx[1]] == empty_value:
                new_e = np.copy(e)
                new_e[agent_idx[0], agent_idx[1]] = empty_value
                new_e[new_agent_idx[0], new_agent_idx[1]] = agent_value
                new_states.append(new_e)
                new_targets.append(push_up)

    if is_tba_h:
        # box is to the right of the target, agent is to the right of the box:
        # current state:
        # 1 1 1 1 1 1 1
        # 1 0 0 0 0 0 1
        # 1 0 0 0 0 0 1
        # 1 0 T B A 0 1
        # 1 0 0 0 0 0 1
        # 1 0 0 0 0 0 1
        # 1 1 1 1 1 1 1

        # case 1: agent one cell up, action - move down:
        # 1 1 1 1 1 1 1
        # 1 0 0 0 0 0 1
        # 1 0 0 0 A 0 1
        # 1 0 T B 0 0 1
        # 1 0 0 0 0 0 1
        # 1 0 0 0 0 0 1
        # 1 1 1 1 1 1 1
        new_agent_idx = [agent_idx[0] - 1, agent_idx[1]]
        # check if this is an empty cell
        if e[new_agent_idx[0], new_agent_idx[1]] == empty_value:
            new_e = np.copy(e)
            new_e[agent_idx[0], agent_idx[1]] = empty_value
            new_e[new_agent_idx[0], new_agent_idx[1]] = agent_value
            new_states.append(new_e)
            new_targets.append(push_down)

            # case 2: agent one cell up from the last update state, action - move down:
            # 1 1 1 1 1 1 1
            # 1 0 0 0 A 0 1
            # 1 0 0 0 0 0 1
            # 1 0 T B 0 0 1
            # 1 0 0 0 0 0 1
            # 1 0 0 0 0 0 1
            # 1 1 1 1 1 1 1
            new_agent_idx = [agent_idx[0] - 2, agent_idx[1]]
            # check if this is an empty cell
            if e[new_agent_idx[0], new_agent_idx[1]] == empty_value:
                new_e = np.copy(e)
                new_e[agent_idx[0], agent_idx[1]] = empty_value
                new_e[new_agent_idx[0], new_agent_idx[1]] = agent_value
                new_states.append(new_e)
                new_targets.append(push_down)

        # case 3: agent one cell down, action - move up:
        # 1 1 1 1 1 1 1
        # 1 0 0 0 0 0 1
        # 1 0 0 0 0 0 1
        # 1 0 T B 0 0 1
        # 1 0 0 0 A 0 1
        # 1 0 0 0 0 0 1
        # 1 1 1 1 1 1 1
        new_agent_idx = [agent_idx[0] + 1, agent_idx[1]]
        # check if this is an empty cell
        if e[new_agent_idx[0], new_agent_idx[1]] == empty_value:
            new_e = np.copy(e)
            new_e[agent_idx[0], agent_idx[1]] = empty_value
            new_e[new_agent_idx[0], new_agent_idx[1]] = agent_value
            new_states.append(new_e)
            new_targets.append(push_up)

            # case 4: agent one cell down from the last update state, action - move up:
            # 1 1 1 1 1 1 1
            # 1 0 0 0 0 0 1
            # 1 0 0 0 0 0 1
            # 1 0 T B 0 0 1
            # 1 0 0 0 0 0 1
            # 1 0 0 0 A 0 1
            # 1 1 1 1 1 1 1
            new_agent_idx = [agent_idx[0] + 2, agent_idx[1]]
            # check if this is an empty cell
            if e[new_agent_idx[0], new_agent_idx[1]] == empty_value:
                new_e = np.copy(e)
                new_e[agent_idx[0], agent_idx[1]] = empty_value
                new_e[new_agent_idx[0], new_agent_idx[1]] = agent_value
                new_states.append(new_e)
                new_targets.append(push_up)

    if is_tba_v:
        # box is above the target, agent is above the box:
        # current state:
        # 1 1 1 1 1 1 1
        # 1 0 0 0 0 0 1
        # 1 0 0 T 0 0 1
        # 1 0 0 B 0 0 1
        # 1 0 0 A 0 0 1
        # 1 0 0 0 0 0 1
        # 1 1 1 1 1 1 1

        # case 1: agent one cell left, action - move right
        # 1 1 1 1 1 1 1
        # 1 0 0 0 0 0 1
        # 1 0 0 T 0 0 1
        # 1 0 0 B 0 0 1
        # 1 0 A 0 0 0 1
        # 1 0 0 0 0 0 1
        # 1 1 1 1 1 1 1
        new_agent_idx = [agent_idx[0], agent_idx[1] - 1]
        # check if this is an empty cell
        if e[new_agent_idx[0], new_agent_idx[1]] == empty_value:
            new_e = np.copy(e)
            new_e[agent_idx[0], agent_idx[1]] = empty_value
            new_e[new_agent_idx[0], new_agent_idx[1]] = agent_value
            new_states.append(new_e)
            new_targets.append(push_right)

            # case 2: agent one cell left from the last update state, action - move right:
            # 1 1 1 1 1 1 1
            # 1 0 0 0 0 0 1
            # 1 0 0 T 0 0 1
            # 1 0 0 B 0 0 1
            # 1 A 0 0 0 0 1
            # 1 0 0 0 0 0 1
            # 1 1 1 1 1 1 1
            new_agent_idx = [agent_idx[0], agent_idx[1] - 2]
            # check if this is an empty cell
            if e[new_agent_idx[0], new_agent_idx[1]] == empty_value:
                new_e = np.copy(e)
                new_e[agent_idx[0], agent_idx[1]] = empty_value
                new_e[new_agent_idx[0], new_agent_idx[1]] = agent_value
                new_states.append(new_e)
                new_targets.append(push_right)

        # case 3: agent one cell right, action - move left:
        # 1 1 1 1 1 1 1
        # 1 0 0 0 0 0 1
        # 1 0 0 T 0 0 1
        # 1 0 0 B 0 0 1
        # 1 0 0 0 A 0 1
        # 1 0 0 0 0 0 1
        # 1 1 1 1 1 1 1
        new_agent_idx = [agent_idx[0], agent_idx[1] + 1]
        # check if this is an empty cell
        if e[new_agent_idx[0], new_agent_idx[1]] == empty_value:
            new_e = np.copy(e)
            new_e[agent_idx[0], agent_idx[1]] = empty_value
            new_e[new_agent_idx[0], new_agent_idx[1]] = agent_value
            new_states.append(new_e)
            new_targets.append(push_left)

            # case 4: agent one cell right from the last update state, action - move left:
            # 1 1 1 1 1 1 1
            # 1 0 0 0 0 0 1
            # 1 0 0 T 0 0 1
            # 1 0 0 B 0 0 1
            # 1 0 0 0 0 A 1
            # 1 0 0 0 0 0 1
            # 1 1 1 1 1 1 1
            new_agent_idx = [agent_idx[0], agent_idx[1] + 2]
            # check if this is an empty cell
            if e[new_agent_idx[0], new_agent_idx[1]] == empty_value:
                new_e = np.copy(e)
                new_e[agent_idx[0], agent_idx[1]] = empty_value
                new_e[new_agent_idx[0], new_agent_idx[1]] = agent_value
                new_states.append(new_e)
                new_targets.append(push_left)

    if is_abt_h:
        # box is above the target, agent is above the box:
        # current state:
        # 1 1 1 1 1 1 1
        # 1 0 0 0 0 0 1
        # 1 0 0 A 0 0 1
        # 1 0 0 B 0 0 1
        # 1 0 0 T 0 0 1
        # 1 0 0 0 0 0 1
        # 1 1 1 1 1 1 1

        # case 1: agent one cell left, action - move right
        # 1 1 1 1 1 1 1
        # 1 0 0 0 0 0 1
        # 1 0 A 0 0 0 1
        # 1 0 0 B 0 0 1
        # 1 0 0 T 0 0 1
        # 1 0 0 0 0 0 1
        # 1 1 1 1 1 1 1
        new_agent_idx = [agent_idx[0], agent_idx[1] - 1]
        # check if this is an empty cell
        if e[new_agent_idx[0], new_agent_idx[1]] == empty_value:
            new_e = np.copy(e)
            new_e[agent_idx[0], agent_idx[1]] = empty_value
            new_e[new_agent_idx[0], new_agent_idx[1]] = agent_value
            new_states.append(new_e)
            new_targets.append(push_right)

            # case 2: agent one cell left from the last update state, action - move right:
            # 1 1 1 1 1 1 1
            # 1 0 0 0 0 0 1
            # 1 A 0 0 0 0 1
            # 1 0 0 B 0 0 1
            # 1 0 0 T 0 0 1
            # 1 0 0 0 0 0 1
            # 1 1 1 1 1 1 1
            new_agent_idx = [agent_idx[0], agent_idx[1] - 2]
            # check if this is an empty cell
            if e[new_agent_idx[0], new_agent_idx[1]] == empty_value:
                new_e = np.copy(e)
                new_e[agent_idx[0], agent_idx[1]] = empty_value
                new_e[new_agent_idx[0], new_agent_idx[1]] = agent_value
                new_states.append(new_e)
                new_targets.append(push_right)

        # case 3: agent one cell right, action - move left:
        # 1 1 1 1 1 1 1
        # 1 0 0 0 0 0 1
        # 1 0 0 0 A 0 1
        # 1 0 0 B 0 0 1
        # 1 0 0 T 0 0 1
        # 1 0 0 0 0 0 1
        # 1 1 1 1 1 1 1
        new_agent_idx = [agent_idx[0], agent_idx[1] + 1]
        # check if this is an empty cell
        if e[new_agent_idx[0], new_agent_idx[1]] == empty_value:
            new_e = np.copy(e)
            new_e[agent_idx[0], agent_idx[1]] = empty_value
            new_e[new_agent_idx[0], new_agent_idx[1]] = agent_value
            new_states.append(new_e)
            new_targets.append(push_left)

            # case 4: agent one cell right from the last update state, action - move left:
            # 1 1 1 1 1 1 1
            # 1 0 0 0 0 0 1
            # 1 0 0 0 0 A 1
            # 1 0 0 B 0 0 1
            # 1 0 0 T 0 0 1
            # 1 0 0 0 0 0 1
            # 1 1 1 1 1 1 1
            new_agent_idx = [agent_idx[0], agent_idx[1] + 2]
            # check if this is an empty cell
            if e[new_agent_idx[0], new_agent_idx[1]] == empty_value:
                new_e = np.copy(e)
                new_e[agent_idx[0], agent_idx[1]] = empty_value
                new_e[new_agent_idx[0], new_agent_idx[1]] = agent_value
                new_states.append(new_e)
                new_targets.append(push_left)

    # each state in new_states is 7*7, need to delete the first and last row and column
    for i in range(len(new_states)):
        new_states[i] = new_states[i][1:6, 1:6]
    # each target is a GT class, create a tensor of one hot vectors
    new_targets = torch.tensor(new_targets)
    # new_targets = F.one_hot(new_targets, num_classes=4)
    # convert new_states to tensor
    new_states = torch.tensor(new_states)
    return new_states, new_targets


def generate_direction_room(e):
    '''
    Get a 5*5 grid state which the agent can push the box to target in 1 step,
    check if 6 more states are valid - all sides of box, includes diagonal, but no the agent or target cells
    :param e:
    :return:
    '''
    # indices of the agent, the box and the goal
    e = np.asarray(e.reshape(5, 5))
    # padding the grid with walls, means make it 7*7
    e = np.pad(e, ((1, 1), (1, 1)), 'constant', constant_values=1.0)
    # round for 4 digits
    e = np.round(e, 4)
    box_idx = [np.where(abs(e - box_value) < 0.01)[0][0], np.where(abs(e - box_value) < 0.01)[1][0]]
    agent_idx = [np.where(abs(e - agent_value) < 0.01)[0][0], np.where(abs(e - agent_value) < 0.01)[1][0]]
    goal_idx = [np.where(abs(e - target_value) < 0.01)[0][0], np.where(abs(e -target_value) < 0.01)[1][0]]

    # assert that the box is near target, and the agent is near the box in the same row or column
    # there are 4 possible cases:
    # 1. target, box, agent
    # 2. agent, box, target
    # 3. target above box, agent below box
    # 4. target below box, agent above box
    is_tba_h = (box_idx[0] == goal_idx[0] and box_idx[1] == goal_idx[1] + 1 and agent_idx[0] == box_idx[0] and agent_idx[1] == box_idx[1] + 1)
    is_abt_h = (box_idx[0] == goal_idx[0] and box_idx[1] == goal_idx[1] - 1 and agent_idx[0] == box_idx[0] and agent_idx[1] == box_idx[1] - 1)
    is_tba_v = (box_idx[0] == goal_idx[0] + 1 and box_idx[1] == goal_idx[1] and agent_idx[0] == box_idx[0] + 1 and agent_idx[1] == box_idx[1])
    is_abt_v = (box_idx[0] == goal_idx[0] - 1 and box_idx[1] == goal_idx[1] and agent_idx[0] == box_idx[0] - 1 and agent_idx[1] == box_idx[1])
    assert is_tba_h or is_abt_h or is_tba_v or is_abt_v

    new_states = []
    new_targets = []
    # if tba_h, then add new states - 3 cells above and 3 cells below the box
    # above the agent
    new_agent_idx = [agent_idx[0] - 1, agent_idx[1]]
    if e[new_agent_idx[0], new_agent_idx[1]] == 0:
        new_state = e.copy()
        new_state[agent_idx[0], agent_idx[1]] = 0
        new_state[new_agent_idx[0], new_agent_idx[1]] = agent_value
        new_states.append(new_state)
        # append the target - agent should go down
        new_targets.append(1)

    # below the agent
    new_agent_idx = [agent_idx[0] + 1, agent_idx[1]]
    if e[new_agent_idx[0], new_agent_idx[1]] == 0:
        new_state = e.copy()
        new_state[agent_idx[0], agent_idx[1]] = 0
        new_state[new_agent_idx[0], new_agent_idx[1]] = agent_value
        new_states.append(new_state)
        # append the target - agent should go up
        new_targets.append(0)

    # above of the box
    new_agent_idx = [box_idx[0] - 1, box_idx[1]]
    if e[new_agent_idx[0], new_agent_idx[1]] == 0:
        new_state = e.copy()
        new_state[agent_idx[0], agent_idx[1]] = 0
        new_state[new_agent_idx[0], new_agent_idx[1]] = agent_value
        new_states.append(new_state)
        # append the target - agent should go right
        new_targets.append(3)

    # below of the box
    new_agent_idx = [box_idx[0] + 1, box_idx[1]]
    if e[new_agent_idx[0], new_agent_idx[1]] == 0:
        new_state = e.copy()
        new_state[agent_idx[0], agent_idx[1]] = 0
        new_state[new_agent_idx[0], new_agent_idx[1]] = agent_value
        new_states.append(new_state)
        # append the target - agent should go left
        new_targets.append(2)

    # above of the target
    new_agent_idx = [goal_idx[0] - 1, goal_idx[1]]
    if e[new_agent_idx[0], new_agent_idx[1]] == 0:
        new_state = e.copy()
        new_state[agent_idx[0], agent_idx[1]] = 0
        new_state[new_agent_idx[0], new_agent_idx[1]] = agent_value
        new_states.append(new_state)
        # append the target - agent should go right
        new_targets.append(3)

    # below of the target
    new_agent_idx = [goal_idx[0] + 1, goal_idx[1]]
    if e[new_agent_idx[0], new_agent_idx[1]] == 0:
        new_state = e.copy()
        new_state[agent_idx[0], agent_idx[1]] = 0
        new_state[new_agent_idx[0], new_agent_idx[1]] = agent_value
        new_states.append(new_state)
        # append the target - agent should go right
        new_targets.append(3)

    # if abt_h, then add new states - 3 cells above and 3 cells below the box

    # above the agent
    new_agent_idx = [agent_idx[0] - 1, agent_idx[1]]
    if e[new_agent_idx[0], new_agent_idx[1]] == 0:
        new_state = e.copy()
        new_state[agent_idx[0], agent_idx[1]] = 0
        new_state[new_agent_idx[0], new_agent_idx[1]] = agent_value
        new_states.append(new_state)
        # append the target - agent should go down
        new_targets.append(1)

    # below the agent
    new_agent_idx = [agent_idx[0] + 1, agent_idx[1]]
    if e[new_agent_idx[0], new_agent_idx[1]] == 0:
        new_state = e.copy()
        new_state[agent_idx[0], agent_idx[1]] = 0
        new_state[new_agent_idx[0], new_agent_idx[1]] = agent_value
        new_states.append(new_state)
        # append the target - agent should go up
        new_targets.append(0)

    # above of the box
    new_agent_idx = [box_idx[0] - 1, box_idx[1]]
    if e[new_agent_idx[0], new_agent_idx[1]] == 0:
        new_state = e.copy()
        new_state[agent_idx[0], agent_idx[1]] = 0
        new_state[new_agent_idx[0], new_agent_idx[1]] = agent_value
        new_states.append(new_state)
        # append the target - agent should go left
        new_targets.append(2)

    # below of the box
    new_agent_idx = [box_idx[0] + 1, box_idx[1]]
    if e[new_agent_idx[0], new_agent_idx[1]] == 0:
        new_state = e.copy()
        new_state[agent_idx[0], agent_idx[1]] = 0
        new_state[new_agent_idx[0], new_agent_idx[1]] = agent_value
        new_states.append(new_state)
        # append the target - agent should go right
        new_targets.append(3)

    # above of the target
    new_agent_idx = [goal_idx[0] - 1, goal_idx[1]]
    if e[new_agent_idx[0], new_agent_idx[1]] == 0:
        new_state = e.copy()
        new_state[agent_idx[0], agent_idx[1]] = 0
        new_state[new_agent_idx[0], new_agent_idx[1]] = agent_value
        new_states.append(new_state)
        # append the target - agent should go left
        new_targets.append(2)

    # below of the target
    new_agent_idx = [goal_idx[0] + 1, goal_idx[1]]
    if e[new_agent_idx[0], new_agent_idx[1]] == 0:
        new_state = e.copy()
        new_state[agent_idx[0], agent_idx[1]] = 0
        new_state[new_agent_idx[0], new_agent_idx[1]] = agent_value
        new_states.append(new_state)
        # append the target - agent should go left
        new_targets.append(2)

    # if abt_v, then add new states - 3 cells for each side of the box

    # right of the agent
    new_agent_idx = [agent_idx[0], agent_idx[1] + 1]
    if e[new_agent_idx[0], new_agent_idx[1]] == 0:
        new_state = e.copy()
        new_state[agent_idx[0], agent_idx[1]] = 0
        new_state[new_agent_idx[0], new_agent_idx[1]] = agent_value
        new_states.append(new_state)
        # append the target - agent should go left
        new_targets.append(2)

    # left of the agent
    new_agent_idx = [agent_idx[0], agent_idx[1] - 1]
    if e[new_agent_idx[0], new_agent_idx[1]] == 0:
        new_state = e.copy()
        new_state[agent_idx[0], agent_idx[1]] = 0
        new_state[new_agent_idx[0], new_agent_idx[1]] = agent_value
        new_states.append(new_state)
        # append the target - agent should go right
        new_targets.append(3)

    # right of the box
    new_agent_idx = [box_idx[0], box_idx[1] + 1]
    if e[new_agent_idx[0], new_agent_idx[1]] == 0:
        new_state = e.copy()
        new_state[agent_idx[0], agent_idx[1]] = 0
        new_state[new_agent_idx[0], new_agent_idx[1]] = agent_value
        new_states.append(new_state)
        # append the target - agent should go up
        new_targets.append(0)

    # left of the box
    new_agent_idx = [box_idx[0], box_idx[1] - 1]
    if e[new_agent_idx[0], new_agent_idx[1]] == 0:
        new_state = e.copy()
        new_state[agent_idx[0], agent_idx[1]] = 0
        new_state[new_agent_idx[0], new_agent_idx[1]] = agent_value
        new_states.append(new_state)
        # append the target - agent should go up
        new_targets.append(0)

    # right of the target
    new_agent_idx = [goal_idx[0], goal_idx[1] + 1]
    if e[new_agent_idx[0], new_agent_idx[1]] == 0:
        new_state = e.copy()
        new_state[agent_idx[0], agent_idx[1]] = 0
        new_state[new_agent_idx[0], new_agent_idx[1]] = agent_value
        new_states.append(new_state)
        # append the target - agent should go up
        new_targets.append(0)

    # left of the target
    new_agent_idx = [goal_idx[0], goal_idx[1] - 1]
    if e[new_agent_idx[0], new_agent_idx[1]] == 0:
        new_state = e.copy()
        new_state[agent_idx[0], agent_idx[1]] = 0
        new_state[new_agent_idx[0], new_agent_idx[1]] = agent_value
        new_states.append(new_state)
        # append the target - agent should go up
        new_targets.append(0)

    # if tba_v, then add new states - 3 cells for each side of the box

    # right of the agent
    new_agent_idx = [agent_idx[0], agent_idx[1] + 1]
    if e[new_agent_idx[0], new_agent_idx[1]] == 0:
        new_state = e.copy()
        new_state[agent_idx[0], agent_idx[1]] = 0
        new_state[new_agent_idx[0], new_agent_idx[1]] = agent_value
        new_states.append(new_state)
        # append the target - agent should go left
        new_targets.append(2)

    # left of the agent
    new_agent_idx = [agent_idx[0], agent_idx[1] - 1]
    if e[new_agent_idx[0], new_agent_idx[1]] == 0:
        new_state = e.copy()
        new_state[agent_idx[0], agent_idx[1]] = 0
        new_state[new_agent_idx[0], new_agent_idx[1]] = agent_value
        new_states.append(new_state)
        # append the target - agent should go right
        new_targets.append(3)

    # right of the box
    new_agent_idx = [box_idx[0], box_idx[1] + 1]
    if e[new_agent_idx[0], new_agent_idx[1]] == 0:
        new_state = e.copy()
        new_state[agent_idx[0], agent_idx[1]] = 0
        new_state[new_agent_idx[0], new_agent_idx[1]] = agent_value
        new_states.append(new_state)
        # append the target - agent should go down
        new_targets.append(1)

    # left of the box
    new_agent_idx = [box_idx[0], box_idx[1] - 1]
    if e[new_agent_idx[0], new_agent_idx[1]] == 0:
        new_state = e.copy()
        new_state[agent_idx[0], agent_idx[1]] = 0
        new_state[new_agent_idx[0], new_agent_idx[1]] = agent_value
        new_states.append(new_state)
        # append the target - agent should go down
        new_targets.append(1)

    # right of the target
    new_agent_idx = [goal_idx[0], goal_idx[1] + 1]
    if e[new_agent_idx[0], new_agent_idx[1]] == 0:
        new_state = e.copy()
        new_state[agent_idx[0], agent_idx[1]] = 0
        new_state[new_agent_idx[0], new_agent_idx[1]] = agent_value
        new_states.append(new_state)
        # append the target - agent should go down
        new_targets.append(1)

    # left of the target
    new_agent_idx = [goal_idx[0], goal_idx[1] - 1]
    if e[new_agent_idx[0], new_agent_idx[1]] == 0:
        new_state = e.copy()
        new_state[agent_idx[0], agent_idx[1]] = 0
        new_state[new_agent_idx[0], new_agent_idx[1]] = agent_value
        new_states.append(new_state)
        # append the target - agent should go down
        new_targets.append(1)

    # each state in new_states is 7*7, need to delete the first and last row and column
    for i in range(len(new_states)):
        new_states[i] = new_states[i][1:6, 1:6]
    # each target is a GT class, create a tensor of one hot vectors
    new_targets = torch.tensor(new_targets)
    # new_targets = F.one_hot(new_targets, num_classes=4)
    # convert new_states to tensor
    new_states = torch.tensor(new_states)
    return new_states, new_targets


def generate_pull_aug(states):
    '''
    Given list of 5*5 grids. for each grid replace between agent and box, and then the action is pull instead of push
    :param states:
    :return:
    '''

    new_states = []
    new_targets = []

    for e in states:
        # indices of the agent, the box and the goal
        e = np.asarray(e.reshape(5, 5))
        # round for 4 digits
        e = np.round(e, 4)
        box_idx = [np.where(abs(e - box_value) < 0.01)[0][0], np.where(abs(e - box_value) < 0.01)[1][0]]
        agent_idx = [np.where(abs(e - agent_value) < 0.01)[0][0], np.where(abs(e - agent_value) < 0.01)[1][0]]
        goal_idx = [np.where(abs(e - target_value) < 0.01)[0][0], np.where(abs(e - target_value) < 0.01)[1][0]]
        new_agent_idx = box_idx
        new_box_idx = agent_idx
        new_state = e.copy()
        new_state[agent_idx[0], agent_idx[1]] = box_value
        new_state[box_idx[0], box_idx[1]] = agent_value
        new_states.append(new_state)
        # append the target - agent should go up
        # if goal is above the agent, then the agent should pull up
        if goal_idx[0] < agent_idx[0]:
            new_targets.append(4)
        elif goal_idx[0] > agent_idx[0]:
            new_targets.append(5)
        elif goal_idx[1] < agent_idx[1]:
            new_targets.append(6)
        elif goal_idx[1] > agent_idx[1]:
            new_targets.append(7)
        else:
            raise ValueError('agent and goal are not adjacent')

    # create a long tensor
    new_targets = torch.tensor(new_targets).long()
    # new_targets = F.one_hot(new_targets, num_classes=4)
    # convert new_states to tensor
    new_states = torch.tensor(new_states)
    return new_states, new_targets


def calc_clean_trajectory(buf, f, s):
    # given buffer, start and finish indices, create first-visit clean buffer
    # create tensor of all states from f to s
    buf_states = torch.zeros((s - f + 1, 5, 5))
    for i in range(f, s + 1):
        buf_states[i - f] = buf[i][0]

    visited_states, inverse_indices = torch.unique(buf_states, dim=0, return_inverse=True)
    fv_indices = []
    for v in range(len(visited_states)):
        fv_indices.append(torch.where(inverse_indices == v)[0][0].item())
    fv_indices.sort()
    # add f to fv_indices
    fv_indices = [f + i for i in fv_indices]
    # return the indices from f to s that are first visit, based on inverse_indices
    # unsorted_indices, idx = torch.unique(inverse_indices, sorted=False)

    return fv_indices


def create_clean_buf(buf):
    # given buffer, create first-visit clean buffer
    buf_states = torch.zeros((len(buf), 5, 5))
    for i in range(len(buf)):
        buf_states[i] = buf[i][0]

    visited_states, inverse_indices = torch.unique(buf_states, dim=0, return_inverse=True)
    fv_indices = []
    for v in range(len(visited_states)):
        fv_indices.append(torch.where(inverse_indices == v)[0][0].item())
    fv_indices.sort()

    buf_visited = []
    for i in reversed(fv_indices):
        buf_visited.append(buf[i])
    return buf_visited


def create_BP_of_testset():
    train_episodes = [
        (12, [24, 95]),
        (11, [49, 65]),
        (9, [2, 86]),
        (8, [26, 38, 48, 68]),
        (7, [5, 32, 44, 67]),
        (6, [6, 13, 18, 33, 34, 41, 42, 50, 69, 78, 81]),
        (5, [9, 14, 19, 23, 27, 31, 45, 47, 54, 60, 66, 77, 79, 82, 85]),
        (4, [28, 59, 62]),
        (3, [0, 1, 7, 10, 21, 25, 30, 36, 40, 57, 58, 61, 64, 70, 74, 75, 88, 89, 91, 92, 93, 94, 96, 97, 99]),
        (2, [8, 11, 12, 35, 43, 46, 71, 72, 73, 80, 84]),
        (1, [3, 4, 15, 16, 17, 20, 22, 29, 37, 39, 51, 52, 53, 55, 56, 63, 76, 83, 87, 90, 98])
    ]

    # plot bar plor
    fig, ax = plt.subplots()
    ax.bar([i[0] for i in train_episodes], [len(i[1]) for i in train_episodes])
    ax.set_xlabel('Optimal steps')
    ax.set_ylabel('Number of test episodes')
    plt.savefig('BP_of_testset.png')
